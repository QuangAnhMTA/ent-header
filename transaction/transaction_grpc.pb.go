// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: transaction.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// ---------------- Course -----------------
	ListListen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (*Listen, error)
	EndLearnListen(ctx context.Context, in *Listen, opts ...grpc.CallOption) (*Listen, error)
	ListSpeak(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*Speaks, error)
	UpdateSpeak(ctx context.Context, in *Speak, opts ...grpc.CallOption) (*Speak, error)
	EndLearnSpeak(ctx context.Context, in *Speak, opts ...grpc.CallOption) (*Speak, error)
	CreateSentence(ctx context.Context, in *Sentence, opts ...grpc.CallOption) (*Sentence, error)
	CreateLookup(ctx context.Context, in *Lookup, opts ...grpc.CallOption) (*Lookup, error)
	CreateParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error)
	CompleteParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error)
	ListLookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*Lookups, error)
	ListSentence(ctx context.Context, in *SentenceRequest, opts ...grpc.CallOption) (*Sentences, error)
	GetParagraphMax(ctx context.Context, in *ParagraphRequest, opts ...grpc.CallOption) (*Paragraph, error)
	ListParagraph(ctx context.Context, in *ParagraphRequest, opts ...grpc.CallOption) (*Paragraphs, error)
	ListListenDisplay(ctx context.Context, in *ListenDisplayRequest, opts ...grpc.CallOption) (*ListenDisplays, error)
	ListSpeakDisplay(ctx context.Context, in *SpeakDisplayRequest, opts ...grpc.CallOption) (*SpeakDisplays, error)
	ListFavourite(ctx context.Context, in *FavouriteRequest, opts ...grpc.CallOption) (*Favourites, error)
	CreateFavourite(ctx context.Context, in *Favourite, opts ...grpc.CallOption) (*Favourite, error)
	DeleteFavourite(ctx context.Context, in *Favourite, opts ...grpc.CallOption) (*Favourite, error)
	StartParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error)
	ListNewDetail(ctx context.Context, in *NewDetailRequest, opts ...grpc.CallOption) (*NewDetails, error)
	ListNew(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*News, error)
	StartLearn(ctx context.Context, in *Learn, opts ...grpc.CallOption) (*Learn, error)
	EndLearn(ctx context.Context, in *Learn, opts ...grpc.CallOption) (*Learn, error)
	CreateMemberAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Answer, error)
	UpdateMemberAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Answer, error)
	ListMemberAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answers, error)
	CreateAnswers(ctx context.Context, in *Answers, opts ...grpc.CallOption) (*Answers, error)
	ListReportToken(ctx context.Context, in *ReportTokenRequest, opts ...grpc.CallOption) (*ReportTokens, error)
	ListReportPoint(ctx context.Context, in *ReportPointRequest, opts ...grpc.CallOption) (*ReportPoints, error)
	ListReportMember(ctx context.Context, in *ReportMemberRequest, opts ...grpc.CallOption) (*ReportMembers, error)
	CreateRecommend(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answers, error)
	BuyToken(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*Cart, error)
	PaymentCart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*Cart, error)
	ListMemberTokenTransaction(ctx context.Context, in *MemberTokenTransactionRequest, opts ...grpc.CallOption) (*MemberTokenTransactions, error)
	ListReportTokenTransaction(ctx context.Context, in *MemberTokenTransactionRequest, opts ...grpc.CallOption) (*ReportMemberTokenTransactionResponse, error)
	GetMemberToken(ctx context.Context, in *MemberTokenRequest, opts ...grpc.CallOption) (*MemberToken, error)
	ListMemberToken(ctx context.Context, in *MemberTokenRequest, opts ...grpc.CallOption) (*MemberTokens, error)
	JobTopup(ctx context.Context, in *TopupRequest, opts ...grpc.CallOption) (*Topups, error)
	//   rpc UpdateTopup(TopupRequest) returns (Topup);
	CreateTopup(ctx context.Context, in *TopupRequest, opts ...grpc.CallOption) (*Topup, error)
	CreateReportMember(ctx context.Context, in *ReportMemberRequest, opts ...grpc.CallOption) (*ReportMember, error)
	BackSentence(ctx context.Context, in *BackSentenceRequest, opts ...grpc.CallOption) (*BackSentenceResponse, error)
	CreateReportMembers(ctx context.Context, in *ReportMembers, opts ...grpc.CallOption) (*ReportMembers, error)
	ListReportLearn(ctx context.Context, in *ReportLearnRequest, opts ...grpc.CallOption) (*ReportLearns, error)
	ReportTotalLearn(ctx context.Context, in *ReportLearnRequest, opts ...grpc.CallOption) (*ReportLearns, error)
	CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Order, error)
	ListOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Orders, error)
	ConfirmOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Order, error)
	CreaetReportWord(ctx context.Context, in *ReportWord, opts ...grpc.CallOption) (*ReportWord, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) ListListen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (*Listen, error) {
	out := new(Listen)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListListen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) EndLearnListen(ctx context.Context, in *Listen, opts ...grpc.CallOption) (*Listen, error) {
	out := new(Listen)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/EndLearnListen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListSpeak(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*Speaks, error) {
	out := new(Speaks)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateSpeak(ctx context.Context, in *Speak, opts ...grpc.CallOption) (*Speak, error) {
	out := new(Speak)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/UpdateSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) EndLearnSpeak(ctx context.Context, in *Speak, opts ...grpc.CallOption) (*Speak, error) {
	out := new(Speak)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/EndLearnSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateSentence(ctx context.Context, in *Sentence, opts ...grpc.CallOption) (*Sentence, error) {
	out := new(Sentence)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateSentence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateLookup(ctx context.Context, in *Lookup, opts ...grpc.CallOption) (*Lookup, error) {
	out := new(Lookup)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateLookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error) {
	out := new(Paragraph)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CompleteParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error) {
	out := new(Paragraph)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CompleteParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListLookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*Lookups, error) {
	out := new(Lookups)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListLookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListSentence(ctx context.Context, in *SentenceRequest, opts ...grpc.CallOption) (*Sentences, error) {
	out := new(Sentences)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListSentence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetParagraphMax(ctx context.Context, in *ParagraphRequest, opts ...grpc.CallOption) (*Paragraph, error) {
	out := new(Paragraph)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/GetParagraphMax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListParagraph(ctx context.Context, in *ParagraphRequest, opts ...grpc.CallOption) (*Paragraphs, error) {
	out := new(Paragraphs)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListListenDisplay(ctx context.Context, in *ListenDisplayRequest, opts ...grpc.CallOption) (*ListenDisplays, error) {
	out := new(ListenDisplays)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListListenDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListSpeakDisplay(ctx context.Context, in *SpeakDisplayRequest, opts ...grpc.CallOption) (*SpeakDisplays, error) {
	out := new(SpeakDisplays)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListSpeakDisplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListFavourite(ctx context.Context, in *FavouriteRequest, opts ...grpc.CallOption) (*Favourites, error) {
	out := new(Favourites)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateFavourite(ctx context.Context, in *Favourite, opts ...grpc.CallOption) (*Favourite, error) {
	out := new(Favourite)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteFavourite(ctx context.Context, in *Favourite, opts ...grpc.CallOption) (*Favourite, error) {
	out := new(Favourite)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/DeleteFavourite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) StartParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error) {
	out := new(Paragraph)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/StartParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListNewDetail(ctx context.Context, in *NewDetailRequest, opts ...grpc.CallOption) (*NewDetails, error) {
	out := new(NewDetails)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListNewDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListNew(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*News, error) {
	out := new(News)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) StartLearn(ctx context.Context, in *Learn, opts ...grpc.CallOption) (*Learn, error) {
	out := new(Learn)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/StartLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) EndLearn(ctx context.Context, in *Learn, opts ...grpc.CallOption) (*Learn, error) {
	out := new(Learn)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/EndLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateMemberAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateMemberAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateMemberAnswer(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/UpdateMemberAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListMemberAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answers, error) {
	out := new(Answers)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListMemberAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateAnswers(ctx context.Context, in *Answers, opts ...grpc.CallOption) (*Answers, error) {
	out := new(Answers)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListReportToken(ctx context.Context, in *ReportTokenRequest, opts ...grpc.CallOption) (*ReportTokens, error) {
	out := new(ReportTokens)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListReportToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListReportPoint(ctx context.Context, in *ReportPointRequest, opts ...grpc.CallOption) (*ReportPoints, error) {
	out := new(ReportPoints)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListReportPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListReportMember(ctx context.Context, in *ReportMemberRequest, opts ...grpc.CallOption) (*ReportMembers, error) {
	out := new(ReportMembers)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListReportMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateRecommend(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answers, error) {
	out := new(Answers)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BuyToken(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/BuyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) PaymentCart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/PaymentCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListMemberTokenTransaction(ctx context.Context, in *MemberTokenTransactionRequest, opts ...grpc.CallOption) (*MemberTokenTransactions, error) {
	out := new(MemberTokenTransactions)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListMemberTokenTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListReportTokenTransaction(ctx context.Context, in *MemberTokenTransactionRequest, opts ...grpc.CallOption) (*ReportMemberTokenTransactionResponse, error) {
	out := new(ReportMemberTokenTransactionResponse)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListReportTokenTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetMemberToken(ctx context.Context, in *MemberTokenRequest, opts ...grpc.CallOption) (*MemberToken, error) {
	out := new(MemberToken)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/GetMemberToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListMemberToken(ctx context.Context, in *MemberTokenRequest, opts ...grpc.CallOption) (*MemberTokens, error) {
	out := new(MemberTokens)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListMemberToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) JobTopup(ctx context.Context, in *TopupRequest, opts ...grpc.CallOption) (*Topups, error) {
	out := new(Topups)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/JobTopup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTopup(ctx context.Context, in *TopupRequest, opts ...grpc.CallOption) (*Topup, error) {
	out := new(Topup)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateTopup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateReportMember(ctx context.Context, in *ReportMemberRequest, opts ...grpc.CallOption) (*ReportMember, error) {
	out := new(ReportMember)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateReportMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BackSentence(ctx context.Context, in *BackSentenceRequest, opts ...grpc.CallOption) (*BackSentenceResponse, error) {
	out := new(BackSentenceResponse)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/BackSentence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateReportMembers(ctx context.Context, in *ReportMembers, opts ...grpc.CallOption) (*ReportMembers, error) {
	out := new(ReportMembers)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateReportMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListReportLearn(ctx context.Context, in *ReportLearnRequest, opts ...grpc.CallOption) (*ReportLearns, error) {
	out := new(ReportLearns)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListReportLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ReportTotalLearn(ctx context.Context, in *ReportLearnRequest, opts ...grpc.CallOption) (*ReportLearns, error) {
	out := new(ReportLearns)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ReportTotalLearn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ConfirmOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/ConfirmOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreaetReportWord(ctx context.Context, in *ReportWord, opts ...grpc.CallOption) (*ReportWord, error) {
	out := new(ReportWord)
	err := c.cc.Invoke(ctx, "/transaction.TransactionService/CreaetReportWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations should embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	// ---------------- Course -----------------
	ListListen(context.Context, *ListenRequest) (*Listen, error)
	EndLearnListen(context.Context, *Listen) (*Listen, error)
	ListSpeak(context.Context, *SpeakRequest) (*Speaks, error)
	UpdateSpeak(context.Context, *Speak) (*Speak, error)
	EndLearnSpeak(context.Context, *Speak) (*Speak, error)
	CreateSentence(context.Context, *Sentence) (*Sentence, error)
	CreateLookup(context.Context, *Lookup) (*Lookup, error)
	CreateParagraph(context.Context, *Paragraph) (*Paragraph, error)
	CompleteParagraph(context.Context, *Paragraph) (*Paragraph, error)
	ListLookup(context.Context, *LookupRequest) (*Lookups, error)
	ListSentence(context.Context, *SentenceRequest) (*Sentences, error)
	GetParagraphMax(context.Context, *ParagraphRequest) (*Paragraph, error)
	ListParagraph(context.Context, *ParagraphRequest) (*Paragraphs, error)
	ListListenDisplay(context.Context, *ListenDisplayRequest) (*ListenDisplays, error)
	ListSpeakDisplay(context.Context, *SpeakDisplayRequest) (*SpeakDisplays, error)
	ListFavourite(context.Context, *FavouriteRequest) (*Favourites, error)
	CreateFavourite(context.Context, *Favourite) (*Favourite, error)
	DeleteFavourite(context.Context, *Favourite) (*Favourite, error)
	StartParagraph(context.Context, *Paragraph) (*Paragraph, error)
	ListNewDetail(context.Context, *NewDetailRequest) (*NewDetails, error)
	ListNew(context.Context, *NewRequest) (*News, error)
	StartLearn(context.Context, *Learn) (*Learn, error)
	EndLearn(context.Context, *Learn) (*Learn, error)
	CreateMemberAnswer(context.Context, *Answer) (*Answer, error)
	UpdateMemberAnswer(context.Context, *Answer) (*Answer, error)
	ListMemberAnswer(context.Context, *AnswerRequest) (*Answers, error)
	CreateAnswers(context.Context, *Answers) (*Answers, error)
	ListReportToken(context.Context, *ReportTokenRequest) (*ReportTokens, error)
	ListReportPoint(context.Context, *ReportPointRequest) (*ReportPoints, error)
	ListReportMember(context.Context, *ReportMemberRequest) (*ReportMembers, error)
	CreateRecommend(context.Context, *AnswerRequest) (*Answers, error)
	BuyToken(context.Context, *CartRequest) (*Cart, error)
	PaymentCart(context.Context, *CartRequest) (*Cart, error)
	ListMemberTokenTransaction(context.Context, *MemberTokenTransactionRequest) (*MemberTokenTransactions, error)
	ListReportTokenTransaction(context.Context, *MemberTokenTransactionRequest) (*ReportMemberTokenTransactionResponse, error)
	GetMemberToken(context.Context, *MemberTokenRequest) (*MemberToken, error)
	ListMemberToken(context.Context, *MemberTokenRequest) (*MemberTokens, error)
	JobTopup(context.Context, *TopupRequest) (*Topups, error)
	//   rpc UpdateTopup(TopupRequest) returns (Topup);
	CreateTopup(context.Context, *TopupRequest) (*Topup, error)
	CreateReportMember(context.Context, *ReportMemberRequest) (*ReportMember, error)
	BackSentence(context.Context, *BackSentenceRequest) (*BackSentenceResponse, error)
	CreateReportMembers(context.Context, *ReportMembers) (*ReportMembers, error)
	ListReportLearn(context.Context, *ReportLearnRequest) (*ReportLearns, error)
	ReportTotalLearn(context.Context, *ReportLearnRequest) (*ReportLearns, error)
	CreateOrder(context.Context, *OrderRequest) (*Order, error)
	ListOrder(context.Context, *OrderRequest) (*Orders, error)
	ConfirmOrder(context.Context, *OrderRequest) (*Order, error)
	CreaetReportWord(context.Context, *ReportWord) (*ReportWord, error)
}

// UnimplementedTransactionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) ListListen(context.Context, *ListenRequest) (*Listen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListen not implemented")
}
func (UnimplementedTransactionServiceServer) EndLearnListen(context.Context, *Listen) (*Listen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLearnListen not implemented")
}
func (UnimplementedTransactionServiceServer) ListSpeak(context.Context, *SpeakRequest) (*Speaks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpeak not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateSpeak(context.Context, *Speak) (*Speak, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpeak not implemented")
}
func (UnimplementedTransactionServiceServer) EndLearnSpeak(context.Context, *Speak) (*Speak, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLearnSpeak not implemented")
}
func (UnimplementedTransactionServiceServer) CreateSentence(context.Context, *Sentence) (*Sentence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSentence not implemented")
}
func (UnimplementedTransactionServiceServer) CreateLookup(context.Context, *Lookup) (*Lookup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLookup not implemented")
}
func (UnimplementedTransactionServiceServer) CreateParagraph(context.Context, *Paragraph) (*Paragraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParagraph not implemented")
}
func (UnimplementedTransactionServiceServer) CompleteParagraph(context.Context, *Paragraph) (*Paragraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteParagraph not implemented")
}
func (UnimplementedTransactionServiceServer) ListLookup(context.Context, *LookupRequest) (*Lookups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLookup not implemented")
}
func (UnimplementedTransactionServiceServer) ListSentence(context.Context, *SentenceRequest) (*Sentences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSentence not implemented")
}
func (UnimplementedTransactionServiceServer) GetParagraphMax(context.Context, *ParagraphRequest) (*Paragraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParagraphMax not implemented")
}
func (UnimplementedTransactionServiceServer) ListParagraph(context.Context, *ParagraphRequest) (*Paragraphs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParagraph not implemented")
}
func (UnimplementedTransactionServiceServer) ListListenDisplay(context.Context, *ListenDisplayRequest) (*ListenDisplays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListenDisplay not implemented")
}
func (UnimplementedTransactionServiceServer) ListSpeakDisplay(context.Context, *SpeakDisplayRequest) (*SpeakDisplays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpeakDisplay not implemented")
}
func (UnimplementedTransactionServiceServer) ListFavourite(context.Context, *FavouriteRequest) (*Favourites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavourite not implemented")
}
func (UnimplementedTransactionServiceServer) CreateFavourite(context.Context, *Favourite) (*Favourite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavourite not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteFavourite(context.Context, *Favourite) (*Favourite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavourite not implemented")
}
func (UnimplementedTransactionServiceServer) StartParagraph(context.Context, *Paragraph) (*Paragraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartParagraph not implemented")
}
func (UnimplementedTransactionServiceServer) ListNewDetail(context.Context, *NewDetailRequest) (*NewDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNewDetail not implemented")
}
func (UnimplementedTransactionServiceServer) ListNew(context.Context, *NewRequest) (*News, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNew not implemented")
}
func (UnimplementedTransactionServiceServer) StartLearn(context.Context, *Learn) (*Learn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLearn not implemented")
}
func (UnimplementedTransactionServiceServer) EndLearn(context.Context, *Learn) (*Learn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLearn not implemented")
}
func (UnimplementedTransactionServiceServer) CreateMemberAnswer(context.Context, *Answer) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberAnswer not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateMemberAnswer(context.Context, *Answer) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberAnswer not implemented")
}
func (UnimplementedTransactionServiceServer) ListMemberAnswer(context.Context, *AnswerRequest) (*Answers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberAnswer not implemented")
}
func (UnimplementedTransactionServiceServer) CreateAnswers(context.Context, *Answers) (*Answers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswers not implemented")
}
func (UnimplementedTransactionServiceServer) ListReportToken(context.Context, *ReportTokenRequest) (*ReportTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportToken not implemented")
}
func (UnimplementedTransactionServiceServer) ListReportPoint(context.Context, *ReportPointRequest) (*ReportPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportPoint not implemented")
}
func (UnimplementedTransactionServiceServer) ListReportMember(context.Context, *ReportMemberRequest) (*ReportMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportMember not implemented")
}
func (UnimplementedTransactionServiceServer) CreateRecommend(context.Context, *AnswerRequest) (*Answers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecommend not implemented")
}
func (UnimplementedTransactionServiceServer) BuyToken(context.Context, *CartRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyToken not implemented")
}
func (UnimplementedTransactionServiceServer) PaymentCart(context.Context, *CartRequest) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentCart not implemented")
}
func (UnimplementedTransactionServiceServer) ListMemberTokenTransaction(context.Context, *MemberTokenTransactionRequest) (*MemberTokenTransactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberTokenTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) ListReportTokenTransaction(context.Context, *MemberTokenTransactionRequest) (*ReportMemberTokenTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportTokenTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) GetMemberToken(context.Context, *MemberTokenRequest) (*MemberToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberToken not implemented")
}
func (UnimplementedTransactionServiceServer) ListMemberToken(context.Context, *MemberTokenRequest) (*MemberTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberToken not implemented")
}
func (UnimplementedTransactionServiceServer) JobTopup(context.Context, *TopupRequest) (*Topups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobTopup not implemented")
}
func (UnimplementedTransactionServiceServer) CreateTopup(context.Context, *TopupRequest) (*Topup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopup not implemented")
}
func (UnimplementedTransactionServiceServer) CreateReportMember(context.Context, *ReportMemberRequest) (*ReportMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportMember not implemented")
}
func (UnimplementedTransactionServiceServer) BackSentence(context.Context, *BackSentenceRequest) (*BackSentenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackSentence not implemented")
}
func (UnimplementedTransactionServiceServer) CreateReportMembers(context.Context, *ReportMembers) (*ReportMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportMembers not implemented")
}
func (UnimplementedTransactionServiceServer) ListReportLearn(context.Context, *ReportLearnRequest) (*ReportLearns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportLearn not implemented")
}
func (UnimplementedTransactionServiceServer) ReportTotalLearn(context.Context, *ReportLearnRequest) (*ReportLearns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTotalLearn not implemented")
}
func (UnimplementedTransactionServiceServer) CreateOrder(context.Context, *OrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedTransactionServiceServer) ListOrder(context.Context, *OrderRequest) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedTransactionServiceServer) ConfirmOrder(context.Context, *OrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmOrder not implemented")
}
func (UnimplementedTransactionServiceServer) CreaetReportWord(context.Context, *ReportWord) (*ReportWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreaetReportWord not implemented")
}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_ListListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListListen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListListen(ctx, req.(*ListenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_EndLearnListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Listen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).EndLearnListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/EndLearnListen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).EndLearnListen(ctx, req.(*Listen))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListSpeak(ctx, req.(*SpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Speak)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/UpdateSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateSpeak(ctx, req.(*Speak))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_EndLearnSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Speak)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).EndLearnSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/EndLearnSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).EndLearnSpeak(ctx, req.(*Speak))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateSentence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sentence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateSentence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateSentence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateSentence(ctx, req.(*Sentence))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateLookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateLookup(ctx, req.(*Lookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateParagraph(ctx, req.(*Paragraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CompleteParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CompleteParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CompleteParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CompleteParagraph(ctx, req.(*Paragraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListLookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListLookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListSentence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListSentence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListSentence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListSentence(ctx, req.(*SentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetParagraphMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetParagraphMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/GetParagraphMax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetParagraphMax(ctx, req.(*ParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListParagraph(ctx, req.(*ParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListListenDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenDisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListListenDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListListenDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListListenDisplay(ctx, req.(*ListenDisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListSpeakDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakDisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListSpeakDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListSpeakDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListSpeakDisplay(ctx, req.(*SpeakDisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavouriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListFavourite(ctx, req.(*FavouriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Favourite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateFavourite(ctx, req.(*Favourite))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Favourite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/DeleteFavourite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteFavourite(ctx, req.(*Favourite))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_StartParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).StartParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/StartParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).StartParagraph(ctx, req.(*Paragraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListNewDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListNewDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListNewDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListNewDetail(ctx, req.(*NewDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListNew(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_StartLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Learn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).StartLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/StartLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).StartLearn(ctx, req.(*Learn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_EndLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Learn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).EndLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/EndLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).EndLearn(ctx, req.(*Learn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateMemberAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateMemberAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateMemberAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateMemberAnswer(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateMemberAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateMemberAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/UpdateMemberAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateMemberAnswer(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListMemberAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListMemberAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListMemberAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListMemberAnswer(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateAnswers(ctx, req.(*Answers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListReportToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListReportToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListReportToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListReportToken(ctx, req.(*ReportTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListReportPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListReportPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListReportPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListReportPoint(ctx, req.(*ReportPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListReportMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListReportMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListReportMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListReportMember(ctx, req.(*ReportMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateRecommend(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BuyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BuyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/BuyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BuyToken(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_PaymentCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).PaymentCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/PaymentCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).PaymentCart(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListMemberTokenTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberTokenTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListMemberTokenTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListMemberTokenTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListMemberTokenTransaction(ctx, req.(*MemberTokenTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListReportTokenTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberTokenTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListReportTokenTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListReportTokenTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListReportTokenTransaction(ctx, req.(*MemberTokenTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetMemberToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetMemberToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/GetMemberToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetMemberToken(ctx, req.(*MemberTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListMemberToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListMemberToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListMemberToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListMemberToken(ctx, req.(*MemberTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_JobTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).JobTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/JobTopup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).JobTopup(ctx, req.(*TopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTopup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTopup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateTopup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTopup(ctx, req.(*TopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateReportMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateReportMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateReportMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateReportMember(ctx, req.(*ReportMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BackSentence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackSentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BackSentence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/BackSentence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BackSentence(ctx, req.(*BackSentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateReportMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateReportMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateReportMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateReportMembers(ctx, req.(*ReportMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListReportLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportLearnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListReportLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListReportLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListReportLearn(ctx, req.(*ReportLearnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ReportTotalLearn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportLearnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ReportTotalLearn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ReportTotalLearn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ReportTotalLearn(ctx, req.(*ReportLearnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ConfirmOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ConfirmOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/ConfirmOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ConfirmOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreaetReportWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreaetReportWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.TransactionService/CreaetReportWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreaetReportWord(ctx, req.(*ReportWord))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListListen",
			Handler:    _TransactionService_ListListen_Handler,
		},
		{
			MethodName: "EndLearnListen",
			Handler:    _TransactionService_EndLearnListen_Handler,
		},
		{
			MethodName: "ListSpeak",
			Handler:    _TransactionService_ListSpeak_Handler,
		},
		{
			MethodName: "UpdateSpeak",
			Handler:    _TransactionService_UpdateSpeak_Handler,
		},
		{
			MethodName: "EndLearnSpeak",
			Handler:    _TransactionService_EndLearnSpeak_Handler,
		},
		{
			MethodName: "CreateSentence",
			Handler:    _TransactionService_CreateSentence_Handler,
		},
		{
			MethodName: "CreateLookup",
			Handler:    _TransactionService_CreateLookup_Handler,
		},
		{
			MethodName: "CreateParagraph",
			Handler:    _TransactionService_CreateParagraph_Handler,
		},
		{
			MethodName: "CompleteParagraph",
			Handler:    _TransactionService_CompleteParagraph_Handler,
		},
		{
			MethodName: "ListLookup",
			Handler:    _TransactionService_ListLookup_Handler,
		},
		{
			MethodName: "ListSentence",
			Handler:    _TransactionService_ListSentence_Handler,
		},
		{
			MethodName: "GetParagraphMax",
			Handler:    _TransactionService_GetParagraphMax_Handler,
		},
		{
			MethodName: "ListParagraph",
			Handler:    _TransactionService_ListParagraph_Handler,
		},
		{
			MethodName: "ListListenDisplay",
			Handler:    _TransactionService_ListListenDisplay_Handler,
		},
		{
			MethodName: "ListSpeakDisplay",
			Handler:    _TransactionService_ListSpeakDisplay_Handler,
		},
		{
			MethodName: "ListFavourite",
			Handler:    _TransactionService_ListFavourite_Handler,
		},
		{
			MethodName: "CreateFavourite",
			Handler:    _TransactionService_CreateFavourite_Handler,
		},
		{
			MethodName: "DeleteFavourite",
			Handler:    _TransactionService_DeleteFavourite_Handler,
		},
		{
			MethodName: "StartParagraph",
			Handler:    _TransactionService_StartParagraph_Handler,
		},
		{
			MethodName: "ListNewDetail",
			Handler:    _TransactionService_ListNewDetail_Handler,
		},
		{
			MethodName: "ListNew",
			Handler:    _TransactionService_ListNew_Handler,
		},
		{
			MethodName: "StartLearn",
			Handler:    _TransactionService_StartLearn_Handler,
		},
		{
			MethodName: "EndLearn",
			Handler:    _TransactionService_EndLearn_Handler,
		},
		{
			MethodName: "CreateMemberAnswer",
			Handler:    _TransactionService_CreateMemberAnswer_Handler,
		},
		{
			MethodName: "UpdateMemberAnswer",
			Handler:    _TransactionService_UpdateMemberAnswer_Handler,
		},
		{
			MethodName: "ListMemberAnswer",
			Handler:    _TransactionService_ListMemberAnswer_Handler,
		},
		{
			MethodName: "CreateAnswers",
			Handler:    _TransactionService_CreateAnswers_Handler,
		},
		{
			MethodName: "ListReportToken",
			Handler:    _TransactionService_ListReportToken_Handler,
		},
		{
			MethodName: "ListReportPoint",
			Handler:    _TransactionService_ListReportPoint_Handler,
		},
		{
			MethodName: "ListReportMember",
			Handler:    _TransactionService_ListReportMember_Handler,
		},
		{
			MethodName: "CreateRecommend",
			Handler:    _TransactionService_CreateRecommend_Handler,
		},
		{
			MethodName: "BuyToken",
			Handler:    _TransactionService_BuyToken_Handler,
		},
		{
			MethodName: "PaymentCart",
			Handler:    _TransactionService_PaymentCart_Handler,
		},
		{
			MethodName: "ListMemberTokenTransaction",
			Handler:    _TransactionService_ListMemberTokenTransaction_Handler,
		},
		{
			MethodName: "ListReportTokenTransaction",
			Handler:    _TransactionService_ListReportTokenTransaction_Handler,
		},
		{
			MethodName: "GetMemberToken",
			Handler:    _TransactionService_GetMemberToken_Handler,
		},
		{
			MethodName: "ListMemberToken",
			Handler:    _TransactionService_ListMemberToken_Handler,
		},
		{
			MethodName: "JobTopup",
			Handler:    _TransactionService_JobTopup_Handler,
		},
		{
			MethodName: "CreateTopup",
			Handler:    _TransactionService_CreateTopup_Handler,
		},
		{
			MethodName: "CreateReportMember",
			Handler:    _TransactionService_CreateReportMember_Handler,
		},
		{
			MethodName: "BackSentence",
			Handler:    _TransactionService_BackSentence_Handler,
		},
		{
			MethodName: "CreateReportMembers",
			Handler:    _TransactionService_CreateReportMembers_Handler,
		},
		{
			MethodName: "ListReportLearn",
			Handler:    _TransactionService_ListReportLearn_Handler,
		},
		{
			MethodName: "ReportTotalLearn",
			Handler:    _TransactionService_ReportTotalLearn_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _TransactionService_CreateOrder_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _TransactionService_ListOrder_Handler,
		},
		{
			MethodName: "ConfirmOrder",
			Handler:    _TransactionService_ConfirmOrder_Handler,
		},
		{
			MethodName: "CreaetReportWord",
			Handler:    _TransactionService_CreaetReportWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}
