// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: library.proto

package library

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibraryServiceClient is the client API for LibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryServiceClient interface {
	// ---------------- Course -----------------
	ListCourses(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Courses, error)
	ListDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*Documents, error)
	ListParagraph(ctx context.Context, in *ParagraphRequest, opts ...grpc.CallOption) (*Paragraphs, error)
	GetDataSearchEngine(ctx context.Context, in *SearchEngineRequest, opts ...grpc.CallOption) (*SearchEngines, error)
	ListSentence(ctx context.Context, in *SentenceRequest, opts ...grpc.CallOption) (*Sentences, error)
	StartLearnListen(ctx context.Context, in *SentenceRequest, opts ...grpc.CallOption) (*Sentences, error)
	EndLearnListen(ctx context.Context, in *Listen, opts ...grpc.CallOption) (*Listen, error)
	GetPos(ctx context.Context, in *PosRequest, opts ...grpc.CallOption) (*Pos, error)
	ApproveParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error)
}

type libraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryServiceClient(cc grpc.ClientConnInterface) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) ListCourses(ctx context.Context, in *CourseRequest, opts ...grpc.CallOption) (*Courses, error) {
	out := new(Courses)
	err := c.cc.Invoke(ctx, "/library.LibraryService/ListCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ListDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*Documents, error) {
	out := new(Documents)
	err := c.cc.Invoke(ctx, "/library.LibraryService/ListDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ListParagraph(ctx context.Context, in *ParagraphRequest, opts ...grpc.CallOption) (*Paragraphs, error) {
	out := new(Paragraphs)
	err := c.cc.Invoke(ctx, "/library.LibraryService/ListParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetDataSearchEngine(ctx context.Context, in *SearchEngineRequest, opts ...grpc.CallOption) (*SearchEngines, error) {
	out := new(SearchEngines)
	err := c.cc.Invoke(ctx, "/library.LibraryService/GetDataSearchEngine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ListSentence(ctx context.Context, in *SentenceRequest, opts ...grpc.CallOption) (*Sentences, error) {
	out := new(Sentences)
	err := c.cc.Invoke(ctx, "/library.LibraryService/ListSentence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) StartLearnListen(ctx context.Context, in *SentenceRequest, opts ...grpc.CallOption) (*Sentences, error) {
	out := new(Sentences)
	err := c.cc.Invoke(ctx, "/library.LibraryService/StartLearnListen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) EndLearnListen(ctx context.Context, in *Listen, opts ...grpc.CallOption) (*Listen, error) {
	out := new(Listen)
	err := c.cc.Invoke(ctx, "/library.LibraryService/EndLearnListen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetPos(ctx context.Context, in *PosRequest, opts ...grpc.CallOption) (*Pos, error) {
	out := new(Pos)
	err := c.cc.Invoke(ctx, "/library.LibraryService/GetPos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ApproveParagraph(ctx context.Context, in *Paragraph, opts ...grpc.CallOption) (*Paragraph, error) {
	out := new(Paragraph)
	err := c.cc.Invoke(ctx, "/library.LibraryService/ApproveParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServiceServer is the server API for LibraryService service.
// All implementations should embed UnimplementedLibraryServiceServer
// for forward compatibility
type LibraryServiceServer interface {
	// ---------------- Course -----------------
	ListCourses(context.Context, *CourseRequest) (*Courses, error)
	ListDocument(context.Context, *DocumentRequest) (*Documents, error)
	ListParagraph(context.Context, *ParagraphRequest) (*Paragraphs, error)
	GetDataSearchEngine(context.Context, *SearchEngineRequest) (*SearchEngines, error)
	ListSentence(context.Context, *SentenceRequest) (*Sentences, error)
	StartLearnListen(context.Context, *SentenceRequest) (*Sentences, error)
	EndLearnListen(context.Context, *Listen) (*Listen, error)
	GetPos(context.Context, *PosRequest) (*Pos, error)
	ApproveParagraph(context.Context, *Paragraph) (*Paragraph, error)
}

// UnimplementedLibraryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLibraryServiceServer struct {
}

func (UnimplementedLibraryServiceServer) ListCourses(context.Context, *CourseRequest) (*Courses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourses not implemented")
}
func (UnimplementedLibraryServiceServer) ListDocument(context.Context, *DocumentRequest) (*Documents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocument not implemented")
}
func (UnimplementedLibraryServiceServer) ListParagraph(context.Context, *ParagraphRequest) (*Paragraphs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParagraph not implemented")
}
func (UnimplementedLibraryServiceServer) GetDataSearchEngine(context.Context, *SearchEngineRequest) (*SearchEngines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSearchEngine not implemented")
}
func (UnimplementedLibraryServiceServer) ListSentence(context.Context, *SentenceRequest) (*Sentences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSentence not implemented")
}
func (UnimplementedLibraryServiceServer) StartLearnListen(context.Context, *SentenceRequest) (*Sentences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLearnListen not implemented")
}
func (UnimplementedLibraryServiceServer) EndLearnListen(context.Context, *Listen) (*Listen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLearnListen not implemented")
}
func (UnimplementedLibraryServiceServer) GetPos(context.Context, *PosRequest) (*Pos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPos not implemented")
}
func (UnimplementedLibraryServiceServer) ApproveParagraph(context.Context, *Paragraph) (*Paragraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveParagraph not implemented")
}

// UnsafeLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServiceServer will
// result in compilation errors.
type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

func RegisterLibraryServiceServer(s grpc.ServiceRegistrar, srv LibraryServiceServer) {
	s.RegisterService(&LibraryService_ServiceDesc, srv)
}

func _LibraryService_ListCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ListCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/ListCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListCourses(ctx, req.(*CourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_ListDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ListDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/ListDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListDocument(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_ListParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ListParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/ListParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListParagraph(ctx, req.(*ParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetDataSearchEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetDataSearchEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/GetDataSearchEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetDataSearchEngine(ctx, req.(*SearchEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_ListSentence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ListSentence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/ListSentence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListSentence(ctx, req.(*SentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_StartLearnListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).StartLearnListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/StartLearnListen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).StartLearnListen(ctx, req.(*SentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_EndLearnListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Listen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).EndLearnListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/EndLearnListen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).EndLearnListen(ctx, req.(*Listen))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/GetPos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetPos(ctx, req.(*PosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_ApproveParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ApproveParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/ApproveParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ApproveParagraph(ctx, req.(*Paragraph))
	}
	return interceptor(ctx, in, info, handler)
}

// LibraryService_ServiceDesc is the grpc.ServiceDesc for LibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCourses",
			Handler:    _LibraryService_ListCourses_Handler,
		},
		{
			MethodName: "ListDocument",
			Handler:    _LibraryService_ListDocument_Handler,
		},
		{
			MethodName: "ListParagraph",
			Handler:    _LibraryService_ListParagraph_Handler,
		},
		{
			MethodName: "GetDataSearchEngine",
			Handler:    _LibraryService_GetDataSearchEngine_Handler,
		},
		{
			MethodName: "ListSentence",
			Handler:    _LibraryService_ListSentence_Handler,
		},
		{
			MethodName: "StartLearnListen",
			Handler:    _LibraryService_StartLearnListen_Handler,
		},
		{
			MethodName: "EndLearnListen",
			Handler:    _LibraryService_EndLearnListen_Handler,
		},
		{
			MethodName: "GetPos",
			Handler:    _LibraryService_GetPos_Handler,
		},
		{
			MethodName: "ApproveParagraph",
			Handler:    _LibraryService_ApproveParagraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}
