// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: library.proto

package library

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Course_Status int32

const (
	Course_default_state Course_Status = 0
	Course_deactive      Course_Status = 1
	Course_active        Course_Status = 2
)

// Enum value maps for Course_Status.
var (
	Course_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Course_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Course_Status) Enum() *Course_Status {
	p := new(Course_Status)
	*p = x
	return p
}

func (x Course_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Course_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[0].Descriptor()
}

func (Course_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[0]
}

func (x Course_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Course_Status.Descriptor instead.
func (Course_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{2, 0}
}

type Document_Status int32

const (
	Document_default_state Document_Status = 0
	Document_deactive      Document_Status = 1
	Document_active        Document_Status = 2
)

// Enum value maps for Document_Status.
var (
	Document_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Document_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Document_Status) Enum() *Document_Status {
	p := new(Document_Status)
	*p = x
	return p
}

func (x Document_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Document_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[1].Descriptor()
}

func (Document_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[1]
}

func (x Document_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Document_Status.Descriptor instead.
func (Document_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{5, 0}
}

type Paragraph_Type int32

const (
	Paragraph_default_type     Paragraph_Type = 0
	Paragraph_normal_paragraph Paragraph_Type = 1
	Paragraph_conversation     Paragraph_Type = 2
	Paragraph_quiz             Paragraph_Type = 3
	Paragraph_image_paragraph  Paragraph_Type = 4
)

// Enum value maps for Paragraph_Type.
var (
	Paragraph_Type_name = map[int32]string{
		0: "default_type",
		1: "normal_paragraph",
		2: "conversation",
		3: "quiz",
		4: "image_paragraph",
	}
	Paragraph_Type_value = map[string]int32{
		"default_type":     0,
		"normal_paragraph": 1,
		"conversation":     2,
		"quiz":             3,
		"image_paragraph":  4,
	}
)

func (x Paragraph_Type) Enum() *Paragraph_Type {
	p := new(Paragraph_Type)
	*p = x
	return p
}

func (x Paragraph_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Paragraph_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[2].Descriptor()
}

func (Paragraph_Type) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[2]
}

func (x Paragraph_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Paragraph_Type.Descriptor instead.
func (Paragraph_Type) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{8, 0}
}

type Paragraph_ProcessApprove int32

const (
	Paragraph_default_approved Paragraph_ProcessApprove = 0
	Paragraph_not_approved     Paragraph_ProcessApprove = 1
	Paragraph_yes_approved     Paragraph_ProcessApprove = 2
	Paragraph_again_approved   Paragraph_ProcessApprove = 3
)

// Enum value maps for Paragraph_ProcessApprove.
var (
	Paragraph_ProcessApprove_name = map[int32]string{
		0: "default_approved",
		1: "not_approved",
		2: "yes_approved",
		3: "again_approved",
	}
	Paragraph_ProcessApprove_value = map[string]int32{
		"default_approved": 0,
		"not_approved":     1,
		"yes_approved":     2,
		"again_approved":   3,
	}
)

func (x Paragraph_ProcessApprove) Enum() *Paragraph_ProcessApprove {
	p := new(Paragraph_ProcessApprove)
	*p = x
	return p
}

func (x Paragraph_ProcessApprove) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Paragraph_ProcessApprove) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[3].Descriptor()
}

func (Paragraph_ProcessApprove) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[3]
}

func (x Paragraph_ProcessApprove) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Paragraph_ProcessApprove.Descriptor instead.
func (Paragraph_ProcessApprove) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{8, 1}
}

type Paragraph_Status int32

const (
	Paragraph_default_state Paragraph_Status = 0
	Paragraph_deactive      Paragraph_Status = 1
	Paragraph_active        Paragraph_Status = 2
)

// Enum value maps for Paragraph_Status.
var (
	Paragraph_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Paragraph_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Paragraph_Status) Enum() *Paragraph_Status {
	p := new(Paragraph_Status)
	*p = x
	return p
}

func (x Paragraph_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Paragraph_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[4].Descriptor()
}

func (Paragraph_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[4]
}

func (x Paragraph_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Paragraph_Status.Descriptor instead.
func (Paragraph_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{8, 2}
}

type Sentence_Status int32

const (
	Sentence_default_state Sentence_Status = 0
	Sentence_deactive      Sentence_Status = 1
	Sentence_active        Sentence_Status = 2
)

// Enum value maps for Sentence_Status.
var (
	Sentence_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Sentence_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Sentence_Status) Enum() *Sentence_Status {
	p := new(Sentence_Status)
	*p = x
	return p
}

func (x Sentence_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sentence_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[5].Descriptor()
}

func (Sentence_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[5]
}

func (x Sentence_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sentence_Status.Descriptor instead.
func (Sentence_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{11, 0}
}

type Audio_Status int32

const (
	Audio_default_state Audio_Status = 0
	Audio_deactive      Audio_Status = 1
	Audio_active        Audio_Status = 2
)

// Enum value maps for Audio_Status.
var (
	Audio_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Audio_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Audio_Status) Enum() *Audio_Status {
	p := new(Audio_Status)
	*p = x
	return p
}

func (x Audio_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Audio_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[6].Descriptor()
}

func (Audio_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[6]
}

func (x Audio_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Audio_Status.Descriptor instead.
func (Audio_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{14, 0}
}

type SearchEngine_Status int32

const (
	SearchEngine_default_state SearchEngine_Status = 0
	SearchEngine_deactive      SearchEngine_Status = 1
	SearchEngine_active        SearchEngine_Status = 2
)

// Enum value maps for SearchEngine_Status.
var (
	SearchEngine_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	SearchEngine_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x SearchEngine_Status) Enum() *SearchEngine_Status {
	p := new(SearchEngine_Status)
	*p = x
	return p
}

func (x SearchEngine_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchEngine_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[7].Descriptor()
}

func (SearchEngine_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[7]
}

func (x SearchEngine_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchEngine_Status.Descriptor instead.
func (SearchEngine_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{19, 0}
}

type SentencePos_Status int32

const (
	SentencePos_default_state SentencePos_Status = 0
	SentencePos_deactive      SentencePos_Status = 1
	SentencePos_active        SentencePos_Status = 2
)

// Enum value maps for SentencePos_Status.
var (
	SentencePos_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	SentencePos_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x SentencePos_Status) Enum() *SentencePos_Status {
	p := new(SentencePos_Status)
	*p = x
	return p
}

func (x SentencePos_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentencePos_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[8].Descriptor()
}

func (SentencePos_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[8]
}

func (x SentencePos_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentencePos_Status.Descriptor instead.
func (SentencePos_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{22, 0}
}

type Mean_Status int32

const (
	Mean_default_state Mean_Status = 0
	Mean_deactive      Mean_Status = 1
	Mean_active        Mean_Status = 2
)

// Enum value maps for Mean_Status.
var (
	Mean_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Mean_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Mean_Status) Enum() *Mean_Status {
	p := new(Mean_Status)
	*p = x
	return p
}

func (x Mean_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mean_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[9].Descriptor()
}

func (Mean_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[9]
}

func (x Mean_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mean_Status.Descriptor instead.
func (Mean_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{25, 0}
}

type Translation_Status int32

const (
	Translation_default_state Translation_Status = 0
	Translation_deactive      Translation_Status = 1
	Translation_active        Translation_Status = 2
)

// Enum value maps for Translation_Status.
var (
	Translation_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Translation_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Translation_Status) Enum() *Translation_Status {
	p := new(Translation_Status)
	*p = x
	return p
}

func (x Translation_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Translation_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[10].Descriptor()
}

func (Translation_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[10]
}

func (x Translation_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Translation_Status.Descriptor instead.
func (Translation_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{31, 0}
}

type Character_Status int32

const (
	Character_default_state Character_Status = 0
	Character_deactive      Character_Status = 1
	Character_active        Character_Status = 2
)

// Enum value maps for Character_Status.
var (
	Character_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Character_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Character_Status) Enum() *Character_Status {
	p := new(Character_Status)
	*p = x
	return p
}

func (x Character_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Character_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[11].Descriptor()
}

func (Character_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[11]
}

func (x Character_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Character_Status.Descriptor instead.
func (Character_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{34, 0}
}

type Voice_IsCloned int32

const (
	Voice_default_is_cloned Voice_IsCloned = 0
	Voice_no                Voice_IsCloned = 1
	Voice_yes               Voice_IsCloned = 2
)

// Enum value maps for Voice_IsCloned.
var (
	Voice_IsCloned_name = map[int32]string{
		0: "default_is_cloned",
		1: "no",
		2: "yes",
	}
	Voice_IsCloned_value = map[string]int32{
		"default_is_cloned": 0,
		"no":                1,
		"yes":               2,
	}
)

func (x Voice_IsCloned) Enum() *Voice_IsCloned {
	p := new(Voice_IsCloned)
	*p = x
	return p
}

func (x Voice_IsCloned) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Voice_IsCloned) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[12].Descriptor()
}

func (Voice_IsCloned) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[12]
}

func (x Voice_IsCloned) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Voice_IsCloned.Descriptor instead.
func (Voice_IsCloned) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{38, 0}
}

type Phrase_Status int32

const (
	Phrase_default_state Phrase_Status = 0
	Phrase_deactive      Phrase_Status = 1
	Phrase_active        Phrase_Status = 2
)

// Enum value maps for Phrase_Status.
var (
	Phrase_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Phrase_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Phrase_Status) Enum() *Phrase_Status {
	p := new(Phrase_Status)
	*p = x
	return p
}

func (x Phrase_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phrase_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[13].Descriptor()
}

func (Phrase_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[13]
}

func (x Phrase_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phrase_Status.Descriptor instead.
func (Phrase_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{39, 0}
}

type Example_Status int32

const (
	Example_default_state Example_Status = 0
	Example_deactive      Example_Status = 1
	Example_active        Example_Status = 2
)

// Enum value maps for Example_Status.
var (
	Example_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Example_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Example_Status) Enum() *Example_Status {
	p := new(Example_Status)
	*p = x
	return p
}

func (x Example_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Example_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[14].Descriptor()
}

func (Example_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[14]
}

func (x Example_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Example_Status.Descriptor instead.
func (Example_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{42, 0}
}

type Word_Status int32

const (
	Word_default_state Word_Status = 0
	Word_deactive      Word_Status = 1
	Word_active        Word_Status = 2
)

// Enum value maps for Word_Status.
var (
	Word_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	Word_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x Word_Status) Enum() *Word_Status {
	p := new(Word_Status)
	*p = x
	return p
}

func (x Word_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Word_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[15].Descriptor()
}

func (Word_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[15]
}

func (x Word_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Word_Status.Descriptor instead.
func (Word_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{45, 0}
}

type SentenceJob_Process int32

const (
	SentenceJob_default_process SentenceJob_Process = 0
	SentenceJob_processing      SentenceJob_Process = 1
	SentenceJob_success         SentenceJob_Process = 2
	SentenceJob_fail            SentenceJob_Process = 3
)

// Enum value maps for SentenceJob_Process.
var (
	SentenceJob_Process_name = map[int32]string{
		0: "default_process",
		1: "processing",
		2: "success",
		3: "fail",
	}
	SentenceJob_Process_value = map[string]int32{
		"default_process": 0,
		"processing":      1,
		"success":         2,
		"fail":            3,
	}
)

func (x SentenceJob_Process) Enum() *SentenceJob_Process {
	p := new(SentenceJob_Process)
	*p = x
	return p
}

func (x SentenceJob_Process) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentenceJob_Process) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[16].Descriptor()
}

func (SentenceJob_Process) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[16]
}

func (x SentenceJob_Process) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentenceJob_Process.Descriptor instead.
func (SentenceJob_Process) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{50, 0}
}

type SentenceJob_Action int32

const (
	SentenceJob_default_action SentenceJob_Action = 0
	SentenceJob_get_audio      SentenceJob_Action = 1
	SentenceJob_get_pos        SentenceJob_Action = 2
	SentenceJob_get_phrase     SentenceJob_Action = 3
	SentenceJob_get_traslation SentenceJob_Action = 4
)

// Enum value maps for SentenceJob_Action.
var (
	SentenceJob_Action_name = map[int32]string{
		0: "default_action",
		1: "get_audio",
		2: "get_pos",
		3: "get_phrase",
		4: "get_traslation",
	}
	SentenceJob_Action_value = map[string]int32{
		"default_action": 0,
		"get_audio":      1,
		"get_pos":        2,
		"get_phrase":     3,
		"get_traslation": 4,
	}
)

func (x SentenceJob_Action) Enum() *SentenceJob_Action {
	p := new(SentenceJob_Action)
	*p = x
	return p
}

func (x SentenceJob_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentenceJob_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[17].Descriptor()
}

func (SentenceJob_Action) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[17]
}

func (x SentenceJob_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentenceJob_Action.Descriptor instead.
func (SentenceJob_Action) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{50, 1}
}

type SentenceJob_Status int32

const (
	SentenceJob_default_state SentenceJob_Status = 0
	SentenceJob_deactive      SentenceJob_Status = 1
	SentenceJob_active        SentenceJob_Status = 2
)

// Enum value maps for SentenceJob_Status.
var (
	SentenceJob_Status_name = map[int32]string{
		0: "default_state",
		1: "deactive",
		2: "active",
	}
	SentenceJob_Status_value = map[string]int32{
		"default_state": 0,
		"deactive":      1,
		"active":        2,
	}
)

func (x SentenceJob_Status) Enum() *SentenceJob_Status {
	p := new(SentenceJob_Status)
	*p = x
	return p
}

func (x SentenceJob_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentenceJob_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[18].Descriptor()
}

func (SentenceJob_Status) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[18]
}

func (x SentenceJob_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentenceJob_Status.Descriptor instead.
func (SentenceJob_Status) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{50, 2}
}

type Pronounce_Type int32

const (
	Pronounce_default_type Pronounce_Type = 0
	Pronounce_vowel        Pronounce_Type = 1
	Pronounce_consonant    Pronounce_Type = 2
)

// Enum value maps for Pronounce_Type.
var (
	Pronounce_Type_name = map[int32]string{
		0: "default_type",
		1: "vowel",
		2: "consonant",
	}
	Pronounce_Type_value = map[string]int32{
		"default_type": 0,
		"vowel":        1,
		"consonant":    2,
	}
)

func (x Pronounce_Type) Enum() *Pronounce_Type {
	p := new(Pronounce_Type)
	*p = x
	return p
}

func (x Pronounce_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pronounce_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_library_proto_enumTypes[19].Descriptor()
}

func (Pronounce_Type) Type() protoreflect.EnumType {
	return &file_library_proto_enumTypes[19]
}

func (x Pronounce_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pronounce_Type.Descriptor instead.
func (Pronounce_Type) EnumDescriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{51, 0}
}

type Listen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id          int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	MemberId    int64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	SentenceId  int64 `protobuf:"varint,3,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	ParagraphId int64 `protobuf:"varint,4,opt,name=paragraph_id,json=paragraphId,proto3" json:"paragraph_id,omitempty"`
	DocumentId  int64 `protobuf:"varint,5,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	CreatedTime int64 `protobuf:"varint,6,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (x *Listen) Reset() {
	*x = Listen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listen) ProtoMessage() {}

func (x *Listen) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listen.ProtoReflect.Descriptor instead.
func (*Listen) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{0}
}

func (x *Listen) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Listen) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *Listen) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *Listen) GetParagraphId() int64 {
	if x != nil {
		return x.ParagraphId
	}
	return 0
}

func (x *Listen) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *Listen) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type CourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId int64    `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Title     string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Image     string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Type      int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Subject   int32    `protobuf:"varint,6,opt,name=subject,proto3" json:"subject,omitempty"`
	Status    int32    `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CourseIds []int64  `protobuf:"varint,9,rep,packed,name=course_ids,json=courseIds,proto3" json:"course_ids,omitempty"`
	Preload   []string `protobuf:"bytes,10,rep,name=preload,proto3" json:"preload,omitempty"`
	Limit     int32    `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32    `protobuf:"varint,12,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols      []string `protobuf:"bytes,13,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes  []string `protobuf:"bytes,14,rep,name=includes,proto3" json:"includes,omitempty"`
	Ids       []int64  `protobuf:"varint,15,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CourseRequest) Reset() {
	*x = CourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseRequest) ProtoMessage() {}

func (x *CourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseRequest.ProtoReflect.Descriptor instead.
func (*CourseRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{1}
}

func (x *CourseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CourseRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CourseRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CourseRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CourseRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CourseRequest) GetSubject() int32 {
	if x != nil {
		return x.Subject
	}
	return 0
}

func (x *CourseRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CourseRequest) GetCourseIds() []int64 {
	if x != nil {
		return x.CourseIds
	}
	return nil
}

func (x *CourseRequest) GetPreload() []string {
	if x != nil {
		return x.Preload
	}
	return nil
}

func (x *CourseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CourseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CourseRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *CourseRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *CourseRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id        int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	AccountId int64         `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Image     string        `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Type      int32         `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Subject   int32         `protobuf:"varint,6,opt,name=subject,proto3" json:"subject,omitempty"`
	Status    Course_Status `protobuf:"varint,7,opt,name=status,proto3,enum=library.Course_Status" json:"status,omitempty"`
	// `gorm:"-"`
	Documents []*Document `protobuf:"bytes,8,rep,name=documents,proto3" json:"documents,omitempty" gorm:"-"`
}

func (x *Course) Reset() {
	*x = Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{2}
}

func (x *Course) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Course) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Course) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Course) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Course) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Course) GetSubject() int32 {
	if x != nil {
		return x.Subject
	}
	return 0
}

func (x *Course) GetStatus() Course_Status {
	if x != nil {
		return x.Status
	}
	return Course_default_state
}

func (x *Course) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

type Courses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Courses []*Course `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
	Total   int64     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Courses) Reset() {
	*x = Courses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Courses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Courses) ProtoMessage() {}

func (x *Courses) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Courses.ProtoReflect.Descriptor instead.
func (*Courses) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{3}
}

func (x *Courses) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *Courses) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CourseId  int64    `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Title     string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Image     string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Content   string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Status    int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Preload   []string `protobuf:"bytes,7,rep,name=preload,proto3" json:"preload,omitempty"`
	CourseIds []int64  `protobuf:"varint,8,rep,packed,name=course_ids,json=courseIds,proto3" json:"course_ids,omitempty"`
	Limit     int32    `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32    `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols      []string `protobuf:"bytes,11,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes  []string `protobuf:"bytes,12,rep,name=includes,proto3" json:"includes,omitempty"`
	CurrentId int64    `protobuf:"varint,14,opt,name=current_id,json=currentId,proto3" json:"current_id,omitempty"`
	Ids       []int64  `protobuf:"varint,15,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DocumentRequest) Reset() {
	*x = DocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRequest) ProtoMessage() {}

func (x *DocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRequest.ProtoReflect.Descriptor instead.
func (*DocumentRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{4}
}

func (x *DocumentRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DocumentRequest) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *DocumentRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DocumentRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DocumentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *DocumentRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DocumentRequest) GetPreload() []string {
	if x != nil {
		return x.Preload
	}
	return nil
}

func (x *DocumentRequest) GetCourseIds() []int64 {
	if x != nil {
		return x.CourseIds
	}
	return nil
}

func (x *DocumentRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DocumentRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DocumentRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *DocumentRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *DocumentRequest) GetCurrentId() int64 {
	if x != nil {
		return x.CurrentId
	}
	return 0
}

func (x *DocumentRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id       int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	CourseId int64           `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Title    string          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Image    string          `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Content  string          `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Status   Document_Status `protobuf:"varint,6,opt,name=status,proto3,enum=library.Document_Status" json:"status,omitempty"`
	// `gorm:"-"`
	Paragraphs []*Paragraph `protobuf:"bytes,8,rep,name=paragraphs,proto3" json:"paragraphs,omitempty" gorm:"-"`
	// `gorm:"-"`
	Course *Course `protobuf:"bytes,9,opt,name=course,proto3" json:"course,omitempty" gorm:"-"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{5}
}

func (x *Document) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Document) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *Document) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Document) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Document) GetStatus() Document_Status {
	if x != nil {
		return x.Status
	}
	return Document_default_state
}

func (x *Document) GetParagraphs() []*Paragraph {
	if x != nil {
		return x.Paragraphs
	}
	return nil
}

func (x *Document) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

type Documents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*Document `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	Total     int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Course    *Course     `protobuf:"bytes,6,opt,name=course,proto3" json:"course,omitempty"`
}

func (x *Documents) Reset() {
	*x = Documents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documents) ProtoMessage() {}

func (x *Documents) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documents.ProtoReflect.Descriptor instead.
func (*Documents) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{6}
}

func (x *Documents) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *Documents) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Documents) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

type ParagraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DocumentId  int64    `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Type        int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Position    int32    `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	Status      int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Limit       int32    `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32    `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols        []string `protobuf:"bytes,11,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes    []string `protobuf:"bytes,12,rep,name=includes,proto3" json:"includes,omitempty"`
	DocumentIds []int64  `protobuf:"varint,13,rep,packed,name=document_ids,json=documentIds,proto3" json:"document_ids,omitempty"`
	CurrentId   int64    `protobuf:"varint,14,opt,name=current_id,json=currentId,proto3" json:"current_id,omitempty"`
	Ids         []int64  `protobuf:"varint,15,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ParagraphRequest) Reset() {
	*x = ParagraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParagraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParagraphRequest) ProtoMessage() {}

func (x *ParagraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParagraphRequest.ProtoReflect.Descriptor instead.
func (*ParagraphRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{7}
}

func (x *ParagraphRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParagraphRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ParagraphRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ParagraphRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ParagraphRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ParagraphRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ParagraphRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ParagraphRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *ParagraphRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *ParagraphRequest) GetDocumentIds() []int64 {
	if x != nil {
		return x.DocumentIds
	}
	return nil
}

func (x *ParagraphRequest) GetCurrentId() int64 {
	if x != nil {
		return x.CurrentId
	}
	return 0
}

func (x *ParagraphRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Paragraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	ApproveId      int64  `protobuf:"varint,2,opt,name=approve_id,json=approveId,proto3" json:"approve_id,omitempty"`
	AccountId      int64  `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConversationId int64  `protobuf:"varint,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	MemberId       int64  `protobuf:"varint,5,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	CourseId       int64  `protobuf:"varint,6,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	DocumentId     int64  `protobuf:"varint,7,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Title          string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Image          string `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	// `gorm:"text"`
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty" gorm:"text"`
	Location    string `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	// `gorm:"text"`
	LocationDescription string         `protobuf:"bytes,12,opt,name=location_description,json=locationDescription,proto3" json:"location_description,omitempty" gorm:"text"`
	Level               string         `protobuf:"bytes,13,opt,name=level,proto3" json:"level,omitempty"`
	Type                Paragraph_Type `protobuf:"varint,14,opt,name=type,proto3,enum=library.Paragraph_Type" json:"type,omitempty"` //1. Đoạn văn thường, 2. Hội thoại, 3. Quiz, 4. Ảnh
	Position            int32          `protobuf:"varint,15,opt,name=position,proto3" json:"position,omitempty"`
	// `gorm:"text"`
	Keywords         string                   `protobuf:"bytes,16,opt,name=keywords,proto3" json:"keywords,omitempty" gorm:"text"`
	Model            string                   `protobuf:"bytes,17,opt,name=model,proto3" json:"model,omitempty"`
	ProcessIndexed   int32                    `protobuf:"varint,18,opt,name=process_indexed,json=processIndexed,proto3" json:"process_indexed,omitempty"`
	ProcessTranslate int32                    `protobuf:"varint,19,opt,name=process_translate,json=processTranslate,proto3" json:"process_translate,omitempty"`
	ProcessSentence  int32                    `protobuf:"varint,20,opt,name=process_sentence,json=processSentence,proto3" json:"process_sentence,omitempty"`
	ProcessApprove   Paragraph_ProcessApprove `protobuf:"varint,21,opt,name=process_approve,json=processApprove,proto3,enum=library.Paragraph_ProcessApprove" json:"process_approve,omitempty"` // Duyệt nội dung / 1: Chưa, 2: Đã duyệt
	Status           Paragraph_Status         `protobuf:"varint,22,opt,name=status,proto3,enum=library.Paragraph_Status" json:"status,omitempty"`
	// ProcessAudio process_audio = 16; // Process audio / 1: Chưa xử lý, 2: Đã gửi job tạo audio, 3: Đã tạo xong audio
	// enum ProcessAudio {
	//   default_process_audio = 0;
	//   no_process = 1;
	//   processing = 2;
	//   done =3;
	// }
	CreatedAt int64 `protobuf:"varint,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// int64 updated_at = 19;
	// `gorm:"-"`
	Sentences []*Sentence `protobuf:"bytes,24,rep,name=sentences,proto3" json:"sentences,omitempty" gorm:"-"`
	// `gorm:"-"`
	Document *Document `protobuf:"bytes,25,opt,name=document,proto3" json:"document,omitempty" gorm:"-"`
}

func (x *Paragraph) Reset() {
	*x = Paragraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraph) ProtoMessage() {}

func (x *Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paragraph.ProtoReflect.Descriptor instead.
func (*Paragraph) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{8}
}

func (x *Paragraph) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Paragraph) GetApproveId() int64 {
	if x != nil {
		return x.ApproveId
	}
	return 0
}

func (x *Paragraph) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Paragraph) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *Paragraph) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *Paragraph) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *Paragraph) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *Paragraph) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Paragraph) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Paragraph) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Paragraph) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Paragraph) GetLocationDescription() string {
	if x != nil {
		return x.LocationDescription
	}
	return ""
}

func (x *Paragraph) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Paragraph) GetType() Paragraph_Type {
	if x != nil {
		return x.Type
	}
	return Paragraph_default_type
}

func (x *Paragraph) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Paragraph) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *Paragraph) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Paragraph) GetProcessIndexed() int32 {
	if x != nil {
		return x.ProcessIndexed
	}
	return 0
}

func (x *Paragraph) GetProcessTranslate() int32 {
	if x != nil {
		return x.ProcessTranslate
	}
	return 0
}

func (x *Paragraph) GetProcessSentence() int32 {
	if x != nil {
		return x.ProcessSentence
	}
	return 0
}

func (x *Paragraph) GetProcessApprove() Paragraph_ProcessApprove {
	if x != nil {
		return x.ProcessApprove
	}
	return Paragraph_default_approved
}

func (x *Paragraph) GetStatus() Paragraph_Status {
	if x != nil {
		return x.Status
	}
	return Paragraph_default_state
}

func (x *Paragraph) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Paragraph) GetSentences() []*Sentence {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *Paragraph) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

type Paragraphs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paragraphs         []*Paragraph `protobuf:"bytes,1,rep,name=paragraphs,proto3" json:"paragraphs,omitempty"`
	CurrentId          int64        `protobuf:"varint,3,opt,name=current_id,json=currentId,proto3" json:"current_id,omitempty"`
	Total              int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	DocumentCurrentId  int64        `protobuf:"varint,4,opt,name=document_current_id,json=documentCurrentId,proto3" json:"document_current_id,omitempty"`
	ParagraphCurrentId int64        `protobuf:"varint,5,opt,name=paragraph_current_id,json=paragraphCurrentId,proto3" json:"paragraph_current_id,omitempty"`
	Document           *Document    `protobuf:"bytes,7,opt,name=document,proto3" json:"document,omitempty"`
}

func (x *Paragraphs) Reset() {
	*x = Paragraphs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paragraphs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraphs) ProtoMessage() {}

func (x *Paragraphs) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paragraphs.ProtoReflect.Descriptor instead.
func (*Paragraphs) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{9}
}

func (x *Paragraphs) GetParagraphs() []*Paragraph {
	if x != nil {
		return x.Paragraphs
	}
	return nil
}

func (x *Paragraphs) GetCurrentId() int64 {
	if x != nil {
		return x.CurrentId
	}
	return 0
}

func (x *Paragraphs) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Paragraphs) GetDocumentCurrentId() int64 {
	if x != nil {
		return x.DocumentCurrentId
	}
	return 0
}

func (x *Paragraphs) GetParagraphCurrentId() int64 {
	if x != nil {
		return x.ParagraphCurrentId
	}
	return 0
}

func (x *Paragraphs) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

type SentenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CourseId        int64    `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	DocumentId      int64    `protobuf:"varint,3,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	ParagraphId     int64    `protobuf:"varint,4,opt,name=paragraph_id,json=paragraphId,proto3" json:"paragraph_id,omitempty"`
	CharacterId     int64    `protobuf:"varint,5,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	VoiceId         int64    `protobuf:"varint,6,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	Content         string   `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	TranslateGoogle string   `protobuf:"bytes,8,opt,name=translate_google,json=translateGoogle,proto3" json:"translate_google,omitempty"`
	TranslateEditor string   `protobuf:"bytes,9,opt,name=translate_editor,json=translateEditor,proto3" json:"translate_editor,omitempty"`
	Keywords        string   `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Words           string   `protobuf:"bytes,11,opt,name=words,proto3" json:"words,omitempty"`
	ProcessVoice    int32    `protobuf:"varint,12,opt,name=process_voice,json=processVoice,proto3" json:"process_voice,omitempty"`
	Status          int32    `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	Limit           int32    `protobuf:"varint,14,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32    `protobuf:"varint,15,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols            []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes        []string `protobuf:"bytes,17,rep,name=includes,proto3" json:"includes,omitempty"`
	Ids             []int64  `protobuf:"varint,18,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	CharacterIds    []int64  `protobuf:"varint,19,rep,packed,name=character_ids,json=characterIds,proto3" json:"character_ids,omitempty"`
	CurrentId       int64    `protobuf:"varint,20,opt,name=current_id,json=currentId,proto3" json:"current_id,omitempty"`
}

func (x *SentenceRequest) Reset() {
	*x = SentenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceRequest) ProtoMessage() {}

func (x *SentenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceRequest.ProtoReflect.Descriptor instead.
func (*SentenceRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{10}
}

func (x *SentenceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SentenceRequest) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *SentenceRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *SentenceRequest) GetParagraphId() int64 {
	if x != nil {
		return x.ParagraphId
	}
	return 0
}

func (x *SentenceRequest) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *SentenceRequest) GetVoiceId() int64 {
	if x != nil {
		return x.VoiceId
	}
	return 0
}

func (x *SentenceRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SentenceRequest) GetTranslateGoogle() string {
	if x != nil {
		return x.TranslateGoogle
	}
	return ""
}

func (x *SentenceRequest) GetTranslateEditor() string {
	if x != nil {
		return x.TranslateEditor
	}
	return ""
}

func (x *SentenceRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SentenceRequest) GetWords() string {
	if x != nil {
		return x.Words
	}
	return ""
}

func (x *SentenceRequest) GetProcessVoice() int32 {
	if x != nil {
		return x.ProcessVoice
	}
	return 0
}

func (x *SentenceRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SentenceRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SentenceRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SentenceRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *SentenceRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *SentenceRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SentenceRequest) GetCharacterIds() []int64 {
	if x != nil {
		return x.CharacterIds
	}
	return nil
}

func (x *SentenceRequest) GetCurrentId() int64 {
	if x != nil {
		return x.CurrentId
	}
	return 0
}

type Sentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id             int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	CourseId       int64           `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	DocumentId     int64           `protobuf:"varint,3,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	ParagraphId    int64           `protobuf:"varint,4,opt,name=paragraph_id,json=paragraphId,proto3" json:"paragraph_id,omitempty"`
	CharacterId    int64           `protobuf:"varint,5,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Content        string          `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	Keywords       string          `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Words          string          `protobuf:"bytes,11,opt,name=words,proto3" json:"words,omitempty"`
	ProcessAudio   int32           `protobuf:"varint,12,opt,name=process_audio,json=processAudio,proto3" json:"process_audio,omitempty"`
	ProcessContent int32           `protobuf:"varint,9,opt,name=process_content,json=processContent,proto3" json:"process_content,omitempty"`
	Status         Sentence_Status `protobuf:"varint,13,opt,name=status,proto3,enum=library.Sentence_Status" json:"status,omitempty"`
	// `gorm:"-"`
	Audios []*Audio `protobuf:"bytes,15,rep,name=audios,proto3" json:"audios,omitempty" gorm:"-"`
	// `gorm:"-"`
	Translation *Translation `protobuf:"bytes,16,opt,name=translation,proto3" json:"translation,omitempty" gorm:"-"`
	// `gorm:"-"`
	Score float32 `protobuf:"fixed32,18,opt,name=score,proto3" json:"score,omitempty" gorm:"-"`
	// `gorm:"-"`
	Color string `protobuf:"bytes,19,opt,name=color,proto3" json:"color,omitempty" gorm:"-"`
	// `gorm:"-"`
	Paragraph *Paragraph `protobuf:"bytes,21,opt,name=paragraph,proto3" json:"paragraph,omitempty" gorm:"-"`
	Emotion   string     `protobuf:"bytes,22,opt,name=emotion,proto3" json:"emotion,omitempty"`
	Emoji     string     `protobuf:"bytes,23,opt,name=emoji,proto3" json:"emoji,omitempty"`
	// `gorm:"-"`
	WordsArr []string `protobuf:"bytes,24,rep,name=words_arr,json=wordsArr,proto3" json:"words_arr,omitempty" gorm:"-"`
	// `gorm:"-"`
	SentencePoses []*SentencePos `protobuf:"bytes,25,rep,name=sentence_poses,json=sentencePoses,proto3" json:"sentence_poses,omitempty" gorm:"-"`
	// `gorm:"-"`
	Phrases []*Phrase `protobuf:"bytes,26,rep,name=phrases,proto3" json:"phrases,omitempty" gorm:"-"`
}

func (x *Sentence) Reset() {
	*x = Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentence) ProtoMessage() {}

func (x *Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor instead.
func (*Sentence) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{11}
}

func (x *Sentence) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sentence) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *Sentence) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *Sentence) GetParagraphId() int64 {
	if x != nil {
		return x.ParagraphId
	}
	return 0
}

func (x *Sentence) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *Sentence) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Sentence) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *Sentence) GetWords() string {
	if x != nil {
		return x.Words
	}
	return ""
}

func (x *Sentence) GetProcessAudio() int32 {
	if x != nil {
		return x.ProcessAudio
	}
	return 0
}

func (x *Sentence) GetProcessContent() int32 {
	if x != nil {
		return x.ProcessContent
	}
	return 0
}

func (x *Sentence) GetStatus() Sentence_Status {
	if x != nil {
		return x.Status
	}
	return Sentence_default_state
}

func (x *Sentence) GetAudios() []*Audio {
	if x != nil {
		return x.Audios
	}
	return nil
}

func (x *Sentence) GetTranslation() *Translation {
	if x != nil {
		return x.Translation
	}
	return nil
}

func (x *Sentence) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Sentence) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Sentence) GetParagraph() *Paragraph {
	if x != nil {
		return x.Paragraph
	}
	return nil
}

func (x *Sentence) GetEmotion() string {
	if x != nil {
		return x.Emotion
	}
	return ""
}

func (x *Sentence) GetEmoji() string {
	if x != nil {
		return x.Emoji
	}
	return ""
}

func (x *Sentence) GetWordsArr() []string {
	if x != nil {
		return x.WordsArr
	}
	return nil
}

func (x *Sentence) GetSentencePoses() []*SentencePos {
	if x != nil {
		return x.SentencePoses
	}
	return nil
}

func (x *Sentence) GetPhrases() []*Phrase {
	if x != nil {
		return x.Phrases
	}
	return nil
}

type Sentences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentences               []*Sentence  `protobuf:"bytes,1,rep,name=sentences,proto3" json:"sentences,omitempty"`
	Total                   int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Characters              []*Character `protobuf:"bytes,6,rep,name=characters,proto3" json:"characters,omitempty"`
	DocumentCurrentId       int64        `protobuf:"varint,3,opt,name=document_current_id,json=documentCurrentId,proto3" json:"document_current_id,omitempty"`
	ParagraphCurrentId      int64        `protobuf:"varint,4,opt,name=paragraph_current_id,json=paragraphCurrentId,proto3" json:"paragraph_current_id,omitempty"`
	ListenSentenceCurrentId int64        `protobuf:"varint,8,opt,name=listen_sentence_current_id,json=listenSentenceCurrentId,proto3" json:"listen_sentence_current_id,omitempty"`
	Pragraph                *Paragraph   `protobuf:"bytes,7,opt,name=pragraph,proto3" json:"pragraph,omitempty"`
}

func (x *Sentences) Reset() {
	*x = Sentences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentences) ProtoMessage() {}

func (x *Sentences) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentences.ProtoReflect.Descriptor instead.
func (*Sentences) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{12}
}

func (x *Sentences) GetSentences() []*Sentence {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *Sentences) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Sentences) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *Sentences) GetDocumentCurrentId() int64 {
	if x != nil {
		return x.DocumentCurrentId
	}
	return 0
}

func (x *Sentences) GetParagraphCurrentId() int64 {
	if x != nil {
		return x.ParagraphCurrentId
	}
	return 0
}

func (x *Sentences) GetListenSentenceCurrentId() int64 {
	if x != nil {
		return x.ListenSentenceCurrentId
	}
	return 0
}

func (x *Sentences) GetPragraph() *Paragraph {
	if x != nil {
		return x.Pragraph
	}
	return nil
}

type AudioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SentenceId      int64    `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	VoiceId         int64    `protobuf:"varint,3,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	TranscriptionId string   `protobuf:"bytes,4,opt,name=transcription_id,json=transcriptionId,proto3" json:"transcription_id,omitempty"`
	AccentId        int64    `protobuf:"varint,5,opt,name=accent_id,json=accentId,proto3" json:"accent_id,omitempty"`
	Title           string   `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Language        string   `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	Gender          int32    `protobuf:"varint,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Duration        float32  `protobuf:"fixed32,9,opt,name=duration,proto3" json:"duration,omitempty"`
	Url             string   `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	Length          int64    `protobuf:"varint,11,opt,name=length,proto3" json:"length,omitempty"`
	Count           int64    `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`
	Process         int32    `protobuf:"varint,13,opt,name=process,proto3" json:"process,omitempty"`
	Created         int64    `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty"`
	Status          int32    `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	Limit           int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols            []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes        []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
	SentenceIds     []int64  `protobuf:"varint,20,rep,packed,name=sentence_ids,json=sentenceIds,proto3" json:"sentence_ids,omitempty"`
}

func (x *AudioRequest) Reset() {
	*x = AudioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRequest) ProtoMessage() {}

func (x *AudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRequest.ProtoReflect.Descriptor instead.
func (*AudioRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{13}
}

func (x *AudioRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AudioRequest) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *AudioRequest) GetVoiceId() int64 {
	if x != nil {
		return x.VoiceId
	}
	return 0
}

func (x *AudioRequest) GetTranscriptionId() string {
	if x != nil {
		return x.TranscriptionId
	}
	return ""
}

func (x *AudioRequest) GetAccentId() int64 {
	if x != nil {
		return x.AccentId
	}
	return 0
}

func (x *AudioRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AudioRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AudioRequest) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *AudioRequest) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AudioRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AudioRequest) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *AudioRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AudioRequest) GetProcess() int32 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *AudioRequest) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AudioRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AudioRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AudioRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AudioRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *AudioRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *AudioRequest) GetSentenceIds() []int64 {
	if x != nil {
		return x.SentenceIds
	}
	return nil
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id              int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	SentenceId      int64        `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	VoiceId         int64        `protobuf:"varint,3,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	TranscriptionId string       `protobuf:"bytes,4,opt,name=transcription_id,json=transcriptionId,proto3" json:"transcription_id,omitempty"`
	Speed           int32        `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
	Duration        float32      `protobuf:"fixed32,9,opt,name=duration,proto3" json:"duration,omitempty"`
	Url             string       `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	Size            int64        `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
	Process         int32        `protobuf:"varint,13,opt,name=process,proto3" json:"process,omitempty"`
	CreatedAt       int64        `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status          Audio_Status `protobuf:"varint,15,opt,name=status,proto3,enum=library.Audio_Status" json:"status,omitempty"`
	Keyx            string       `protobuf:"bytes,16,opt,name=keyx,proto3" json:"keyx,omitempty"`
	Format          string       `protobuf:"bytes,17,opt,name=format,proto3" json:"format,omitempty"`
	Version         string       `protobuf:"bytes,18,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{14}
}

func (x *Audio) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Audio) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *Audio) GetVoiceId() int64 {
	if x != nil {
		return x.VoiceId
	}
	return 0
}

func (x *Audio) GetTranscriptionId() string {
	if x != nil {
		return x.TranscriptionId
	}
	return ""
}

func (x *Audio) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Audio) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Audio) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Audio) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Audio) GetProcess() int32 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *Audio) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Audio) GetStatus() Audio_Status {
	if x != nil {
		return x.Status
	}
	return Audio_default_state
}

func (x *Audio) GetKeyx() string {
	if x != nil {
		return x.Keyx
	}
	return ""
}

func (x *Audio) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Audio) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Audios struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audios []*Audio `protobuf:"bytes,1,rep,name=audios,proto3" json:"audios,omitempty"`
	Total  int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Audios) Reset() {
	*x = Audios{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audios) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audios) ProtoMessage() {}

func (x *Audios) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audios.ProtoReflect.Descriptor instead.
func (*Audios) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{15}
}

func (x *Audios) GetAudios() []*Audio {
	if x != nil {
		return x.Audios
	}
	return nil
}

func (x *Audios) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CourseTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CourseId int64 `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	TagId    int64 `protobuf:"varint,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Status   int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CourseTagRequest) Reset() {
	*x = CourseTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseTagRequest) ProtoMessage() {}

func (x *CourseTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseTagRequest.ProtoReflect.Descriptor instead.
func (*CourseTagRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{16}
}

func (x *CourseTagRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CourseTagRequest) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CourseTagRequest) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CourseTagRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CourseTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	CourseId int64 `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	TagId    int64 `protobuf:"varint,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Status   int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CourseTag) Reset() {
	*x = CourseTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseTag) ProtoMessage() {}

func (x *CourseTag) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseTag.ProtoReflect.Descriptor instead.
func (*CourseTag) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{17}
}

func (x *CourseTag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CourseTag) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CourseTag) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CourseTag) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CourseTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseTags []*CourseTag `protobuf:"bytes,1,rep,name=courseTags,proto3" json:"courseTags,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CourseTags) Reset() {
	*x = CourseTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseTags) ProtoMessage() {}

func (x *CourseTags) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseTags.ProtoReflect.Descriptor instead.
func (*CourseTags) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{18}
}

func (x *CourseTags) GetCourseTags() []*CourseTag {
	if x != nil {
		return x.CourseTags
	}
	return nil
}

func (x *CourseTags) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SearchEngine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id       int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	Item     string              `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	ObjectId int64               `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Title    string              `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content  string              `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Status   SearchEngine_Status `protobuf:"varint,6,opt,name=status,proto3,enum=library.SearchEngine_Status" json:"status,omitempty"`
	Created  int64               `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	// `gorm:"-"`
	Courses []*Course `protobuf:"bytes,8,rep,name=courses,proto3" json:"courses,omitempty" gorm:"-"`
	// `gorm:"-"`
	Documents []*Document `protobuf:"bytes,9,rep,name=documents,proto3" json:"documents,omitempty" gorm:"-"`
	// `gorm:"-"`
	Paragraphs []*Paragraph `protobuf:"bytes,10,rep,name=paragraphs,proto3" json:"paragraphs,omitempty" gorm:"-"`
}

func (x *SearchEngine) Reset() {
	*x = SearchEngine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEngine) ProtoMessage() {}

func (x *SearchEngine) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEngine.ProtoReflect.Descriptor instead.
func (*SearchEngine) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{19}
}

func (x *SearchEngine) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchEngine) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *SearchEngine) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *SearchEngine) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchEngine) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SearchEngine) GetStatus() SearchEngine_Status {
	if x != nil {
		return x.Status
	}
	return SearchEngine_default_state
}

func (x *SearchEngine) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *SearchEngine) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *SearchEngine) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *SearchEngine) GetParagraphs() []*Paragraph {
	if x != nil {
		return x.Paragraphs
	}
	return nil
}

type SearchEngineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Item     string   `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	ObjectId int64    `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Title    string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content  string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Status   int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Limit    int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols     []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *SearchEngineRequest) Reset() {
	*x = SearchEngineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEngineRequest) ProtoMessage() {}

func (x *SearchEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEngineRequest.ProtoReflect.Descriptor instead.
func (*SearchEngineRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{20}
}

func (x *SearchEngineRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchEngineRequest) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *SearchEngineRequest) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *SearchEngineRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SearchEngineRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SearchEngineRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchEngineRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchEngineRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SearchEngineRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *SearchEngineRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type SearchEngines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         int32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	SearchEngines []*SearchEngine `protobuf:"bytes,2,rep,name=search_engines,json=searchEngines,proto3" json:"search_engines,omitempty"`
}

func (x *SearchEngines) Reset() {
	*x = SearchEngines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEngines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEngines) ProtoMessage() {}

func (x *SearchEngines) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEngines.ProtoReflect.Descriptor instead.
func (*SearchEngines) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{21}
}

func (x *SearchEngines) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchEngines) GetSearchEngines() []*SearchEngine {
	if x != nil {
		return x.SearchEngines
	}
	return nil
}

type SentencePos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id         int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	SentenceId int64              `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	Word       string             `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	Lemma      string             `protobuf:"bytes,4,opt,name=lemma,proto3" json:"lemma,omitempty"`
	Pos        string             `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	PosGroup   string             `protobuf:"bytes,6,opt,name=pos_group,json=posGroup,proto3" json:"pos_group,omitempty"`
	Position   int32              `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	Status     SentencePos_Status `protobuf:"varint,8,opt,name=status,proto3,enum=library.SentencePos_Status" json:"status,omitempty"`
	// `gorm:"-"`
	WordType string `protobuf:"bytes,11,opt,name=word_type,json=wordType,proto3" json:"word_type,omitempty" gorm:"-"`
	// `gorm:"-"`
	Phonetic string `protobuf:"bytes,12,opt,name=phonetic,proto3" json:"phonetic,omitempty" gorm:"-"`
}

func (x *SentencePos) Reset() {
	*x = SentencePos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentencePos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentencePos) ProtoMessage() {}

func (x *SentencePos) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentencePos.ProtoReflect.Descriptor instead.
func (*SentencePos) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{22}
}

func (x *SentencePos) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SentencePos) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *SentencePos) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *SentencePos) GetLemma() string {
	if x != nil {
		return x.Lemma
	}
	return ""
}

func (x *SentencePos) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *SentencePos) GetPosGroup() string {
	if x != nil {
		return x.PosGroup
	}
	return ""
}

func (x *SentencePos) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SentencePos) GetStatus() SentencePos_Status {
	if x != nil {
		return x.Status
	}
	return SentencePos_default_state
}

func (x *SentencePos) GetWordType() string {
	if x != nil {
		return x.WordType
	}
	return ""
}

func (x *SentencePos) GetPhonetic() string {
	if x != nil {
		return x.Phonetic
	}
	return ""
}

type SentencePosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SentenceId int64    `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	Word       string   `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	Lemma      string   `protobuf:"bytes,4,opt,name=lemma,proto3" json:"lemma,omitempty"`
	Pos        string   `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	PosGroup   string   `protobuf:"bytes,6,opt,name=pos_group,json=posGroup,proto3" json:"pos_group,omitempty"`
	Position   int32    `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	Status     int32    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Ids        []int64  `protobuf:"varint,9,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Limit      int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols       []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes   []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *SentencePosRequest) Reset() {
	*x = SentencePosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentencePosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentencePosRequest) ProtoMessage() {}

func (x *SentencePosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentencePosRequest.ProtoReflect.Descriptor instead.
func (*SentencePosRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{23}
}

func (x *SentencePosRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SentencePosRequest) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *SentencePosRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *SentencePosRequest) GetLemma() string {
	if x != nil {
		return x.Lemma
	}
	return ""
}

func (x *SentencePosRequest) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *SentencePosRequest) GetPosGroup() string {
	if x != nil {
		return x.PosGroup
	}
	return ""
}

func (x *SentencePosRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SentencePosRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SentencePosRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SentencePosRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SentencePosRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SentencePosRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *SentencePosRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type SentencePoses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         int32          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	SentencePoses []*SentencePos `protobuf:"bytes,2,rep,name=sentence_poses,json=sentencePoses,proto3" json:"sentence_poses,omitempty"`
}

func (x *SentencePoses) Reset() {
	*x = SentencePoses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentencePoses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentencePoses) ProtoMessage() {}

func (x *SentencePoses) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentencePoses.ProtoReflect.Descriptor instead.
func (*SentencePoses) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{24}
}

func (x *SentencePoses) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SentencePoses) GetSentencePoses() []*SentencePos {
	if x != nil {
		return x.SentencePoses
	}
	return nil
}

type Mean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	Word      string `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	Lemma     string `protobuf:"bytes,3,opt,name=lemma,proto3" json:"lemma,omitempty"`
	Pos       string `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	PosGroup  string `protobuf:"bytes,5,opt,name=pos_group,json=posGroup,proto3" json:"pos_group,omitempty"`
	Phonetic  string `protobuf:"bytes,6,opt,name=phonetic,proto3" json:"phonetic,omitempty"`
	Translate string `protobuf:"bytes,7,opt,name=translate,proto3" json:"translate,omitempty"`
	// `gorm:"text"`
	Definition string `protobuf:"bytes,8,opt,name=definition,proto3" json:"definition,omitempty" gorm:"text"`
	// `gorm:"text"`
	DefinitionVi string      `protobuf:"bytes,9,opt,name=definition_vi,json=definitionVi,proto3" json:"definition_vi,omitempty" gorm:"text"`
	Review       int32       `protobuf:"varint,10,opt,name=review,proto3" json:"review,omitempty"`
	Status       Mean_Status `protobuf:"varint,11,opt,name=status,proto3,enum=library.Mean_Status" json:"status,omitempty"`
}

func (x *Mean) Reset() {
	*x = Mean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mean) ProtoMessage() {}

func (x *Mean) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mean.ProtoReflect.Descriptor instead.
func (*Mean) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{25}
}

func (x *Mean) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Mean) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Mean) GetLemma() string {
	if x != nil {
		return x.Lemma
	}
	return ""
}

func (x *Mean) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *Mean) GetPosGroup() string {
	if x != nil {
		return x.PosGroup
	}
	return ""
}

func (x *Mean) GetPhonetic() string {
	if x != nil {
		return x.Phonetic
	}
	return ""
}

func (x *Mean) GetTranslate() string {
	if x != nil {
		return x.Translate
	}
	return ""
}

func (x *Mean) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Mean) GetDefinitionVi() string {
	if x != nil {
		return x.DefinitionVi
	}
	return ""
}

func (x *Mean) GetReview() int32 {
	if x != nil {
		return x.Review
	}
	return 0
}

func (x *Mean) GetStatus() Mean_Status {
	if x != nil {
		return x.Status
	}
	return Mean_default_state
}

type MeanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WordId       int64    `protobuf:"varint,2,opt,name=word_id,json=wordId,proto3" json:"word_id,omitempty"`
	Pos          string   `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	PosGroup     string   `protobuf:"bytes,4,opt,name=pos_group,json=posGroup,proto3" json:"pos_group,omitempty"`
	Lemma        string   `protobuf:"bytes,8,opt,name=lemma,proto3" json:"lemma,omitempty"`
	Word         string   `protobuf:"bytes,9,opt,name=word,proto3" json:"word,omitempty"`
	Level        string   `protobuf:"bytes,10,opt,name=level,proto3" json:"level,omitempty"`
	Phonetic     string   `protobuf:"bytes,14,opt,name=phonetic,proto3" json:"phonetic,omitempty"`
	Translate    string   `protobuf:"bytes,15,opt,name=translate,proto3" json:"translate,omitempty"`
	Definition   string   `protobuf:"bytes,16,opt,name=definition,proto3" json:"definition,omitempty"`
	DefinitionVi string   `protobuf:"bytes,17,opt,name=definition_vi,json=definitionVi,proto3" json:"definition_vi,omitempty"`
	Review       int32    `protobuf:"varint,18,opt,name=review,proto3" json:"review,omitempty"`
	Status       int32    `protobuf:"varint,21,opt,name=status,proto3" json:"status,omitempty"`
	Limit        int32    `protobuf:"varint,22,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int32    `protobuf:"varint,23,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols         []string `protobuf:"bytes,24,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes     []string `protobuf:"bytes,25,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *MeanRequest) Reset() {
	*x = MeanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeanRequest) ProtoMessage() {}

func (x *MeanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeanRequest.ProtoReflect.Descriptor instead.
func (*MeanRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{26}
}

func (x *MeanRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeanRequest) GetWordId() int64 {
	if x != nil {
		return x.WordId
	}
	return 0
}

func (x *MeanRequest) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

func (x *MeanRequest) GetPosGroup() string {
	if x != nil {
		return x.PosGroup
	}
	return ""
}

func (x *MeanRequest) GetLemma() string {
	if x != nil {
		return x.Lemma
	}
	return ""
}

func (x *MeanRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *MeanRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *MeanRequest) GetPhonetic() string {
	if x != nil {
		return x.Phonetic
	}
	return ""
}

func (x *MeanRequest) GetTranslate() string {
	if x != nil {
		return x.Translate
	}
	return ""
}

func (x *MeanRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *MeanRequest) GetDefinitionVi() string {
	if x != nil {
		return x.DefinitionVi
	}
	return ""
}

func (x *MeanRequest) GetReview() int32 {
	if x != nil {
		return x.Review
	}
	return 0
}

func (x *MeanRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MeanRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MeanRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MeanRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *MeanRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type Means struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Means []*Mean `protobuf:"bytes,2,rep,name=means,proto3" json:"means,omitempty"`
}

func (x *Means) Reset() {
	*x = Means{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Means) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Means) ProtoMessage() {}

func (x *Means) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Means.ProtoReflect.Descriptor instead.
func (*Means) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{27}
}

func (x *Means) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Means) GetMeans() []*Mean {
	if x != nil {
		return x.Means
	}
	return nil
}

type Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	TagBc   string `protobuf:"bytes,2,opt,name=tag_bc,json=tagBc,proto3" json:"tag_bc,omitempty"`
	TagUn   string `protobuf:"bytes,3,opt,name=tag_un,json=tagUn,proto3" json:"tag_un,omitempty"`
	TagTi   string `protobuf:"bytes,4,opt,name=tag_ti,json=tagTi,proto3" json:"tag_ti,omitempty"`
	TitleEn string `protobuf:"bytes,5,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	Title   string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Process int64  `protobuf:"varint,7,opt,name=process,proto3" json:"process,omitempty"`
	// `gorm:"-"`
	Means []*Mean `protobuf:"bytes,8,rep,name=means,proto3" json:"means,omitempty" gorm:"-"`
	// `gorm:"-"`
	Word *Word `protobuf:"bytes,9,opt,name=word,proto3" json:"word,omitempty" gorm:"-"`
	// `gorm:"-"`
	SentencePosId int64 `protobuf:"varint,10,opt,name=sentence_pos_id,json=sentencePosId,proto3" json:"sentence_pos_id,omitempty" gorm:"-"`
}

func (x *Pos) Reset() {
	*x = Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{28}
}

func (x *Pos) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pos) GetTagBc() string {
	if x != nil {
		return x.TagBc
	}
	return ""
}

func (x *Pos) GetTagUn() string {
	if x != nil {
		return x.TagUn
	}
	return ""
}

func (x *Pos) GetTagTi() string {
	if x != nil {
		return x.TagTi
	}
	return ""
}

func (x *Pos) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *Pos) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Pos) GetProcess() int64 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *Pos) GetMeans() []*Mean {
	if x != nil {
		return x.Means
	}
	return nil
}

func (x *Pos) GetWord() *Word {
	if x != nil {
		return x.Word
	}
	return nil
}

func (x *Pos) GetSentencePosId() int64 {
	if x != nil {
		return x.SentencePosId
	}
	return 0
}

type PosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TagBc          string   `protobuf:"bytes,2,opt,name=tag_bc,json=tagBc,proto3" json:"tag_bc,omitempty"`
	TagUn          string   `protobuf:"bytes,3,opt,name=tag_un,json=tagUn,proto3" json:"tag_un,omitempty"`
	TagTi          string   `protobuf:"bytes,4,opt,name=tag_ti,json=tagTi,proto3" json:"tag_ti,omitempty"`
	TitleEn        string   `protobuf:"bytes,5,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	Title          string   `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Process        int64    `protobuf:"varint,7,opt,name=process,proto3" json:"process,omitempty"`
	Status         int32    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Limit          int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols           []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes       []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
	SentenceId     int64    `protobuf:"varint,20,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	Word           string   `protobuf:"bytes,21,opt,name=word,proto3" json:"word,omitempty"`
	Position       int32    `protobuf:"varint,22,opt,name=position,proto3" json:"position,omitempty"`
	SentencePosIds int64    `protobuf:"varint,23,opt,name=sentence_pos_ids,json=sentencePosIds,proto3" json:"sentence_pos_ids,omitempty"`
	TagBcs         []string `protobuf:"bytes,24,rep,name=tag_bcs,json=tagBcs,proto3" json:"tag_bcs,omitempty"`
}

func (x *PosRequest) Reset() {
	*x = PosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosRequest) ProtoMessage() {}

func (x *PosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosRequest.ProtoReflect.Descriptor instead.
func (*PosRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{29}
}

func (x *PosRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PosRequest) GetTagBc() string {
	if x != nil {
		return x.TagBc
	}
	return ""
}

func (x *PosRequest) GetTagUn() string {
	if x != nil {
		return x.TagUn
	}
	return ""
}

func (x *PosRequest) GetTagTi() string {
	if x != nil {
		return x.TagTi
	}
	return ""
}

func (x *PosRequest) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *PosRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PosRequest) GetProcess() int64 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *PosRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PosRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PosRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PosRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *PosRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *PosRequest) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *PosRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *PosRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PosRequest) GetSentencePosIds() int64 {
	if x != nil {
		return x.SentencePosIds
	}
	return 0
}

func (x *PosRequest) GetTagBcs() []string {
	if x != nil {
		return x.TagBcs
	}
	return nil
}

type Poses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Poses []*Pos `protobuf:"bytes,2,rep,name=poses,proto3" json:"poses,omitempty"`
}

func (x *Poses) Reset() {
	*x = Poses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poses) ProtoMessage() {}

func (x *Poses) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poses.ProtoReflect.Descriptor instead.
func (*Poses) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{30}
}

func (x *Poses) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Poses) GetPoses() []*Pos {
	if x != nil {
		return x.Poses
	}
	return nil
}

type Translation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id              int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	Item            string             `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	ObjectId        int64              `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Content         string             `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	TranslateEditor string             `protobuf:"bytes,5,opt,name=translate_editor,json=translateEditor,proto3" json:"translate_editor,omitempty"`
	TranslateGoogle string             `protobuf:"bytes,6,opt,name=translate_google,json=translateGoogle,proto3" json:"translate_google,omitempty"`
	LangFrom        string             `protobuf:"bytes,7,opt,name=lang_from,json=langFrom,proto3" json:"lang_from,omitempty"`
	LangTo          string             `protobuf:"bytes,8,opt,name=lang_to,json=langTo,proto3" json:"lang_to,omitempty"`
	Field           string             `protobuf:"bytes,9,opt,name=field,proto3" json:"field,omitempty"`
	Status          Translation_Status `protobuf:"varint,10,opt,name=status,proto3,enum=library.Translation_Status" json:"status,omitempty"`
	CreatedAt       int64              `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Translation) Reset() {
	*x = Translation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Translation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Translation) ProtoMessage() {}

func (x *Translation) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Translation.ProtoReflect.Descriptor instead.
func (*Translation) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{31}
}

func (x *Translation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Translation) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *Translation) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *Translation) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Translation) GetTranslateEditor() string {
	if x != nil {
		return x.TranslateEditor
	}
	return ""
}

func (x *Translation) GetTranslateGoogle() string {
	if x != nil {
		return x.TranslateGoogle
	}
	return ""
}

func (x *Translation) GetLangFrom() string {
	if x != nil {
		return x.LangFrom
	}
	return ""
}

func (x *Translation) GetLangTo() string {
	if x != nil {
		return x.LangTo
	}
	return ""
}

func (x *Translation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Translation) GetStatus() Translation_Status {
	if x != nil {
		return x.Status
	}
	return Translation_default_state
}

func (x *Translation) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type Translations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total        int32          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Translations []*Translation `protobuf:"bytes,2,rep,name=translations,proto3" json:"translations,omitempty"`
}

func (x *Translations) Reset() {
	*x = Translations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Translations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Translations) ProtoMessage() {}

func (x *Translations) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Translations.ProtoReflect.Descriptor instead.
func (*Translations) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{32}
}

func (x *Translations) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Translations) GetTranslations() []*Translation {
	if x != nil {
		return x.Translations
	}
	return nil
}

type TranslationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Item            string   `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	ObjectId        int64    `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Content         string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	TranslateEditor string   `protobuf:"bytes,5,opt,name=translate_editor,json=translateEditor,proto3" json:"translate_editor,omitempty"`
	TranslateGoogle string   `protobuf:"bytes,6,opt,name=translate_google,json=translateGoogle,proto3" json:"translate_google,omitempty"`
	LangFrom        string   `protobuf:"bytes,7,opt,name=lang_from,json=langFrom,proto3" json:"lang_from,omitempty"`
	LangTo          string   `protobuf:"bytes,8,opt,name=lang_to,json=langTo,proto3" json:"lang_to,omitempty"`
	Process         int32    `protobuf:"varint,9,opt,name=process,proto3" json:"process,omitempty"`
	Status          int32    `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Ids             []int64  `protobuf:"varint,11,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ObjectIds       []int64  `protobuf:"varint,12,rep,packed,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
	Limit           int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols            []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes        []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *TranslationRequest) Reset() {
	*x = TranslationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationRequest) ProtoMessage() {}

func (x *TranslationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslationRequest.ProtoReflect.Descriptor instead.
func (*TranslationRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{33}
}

func (x *TranslationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TranslationRequest) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *TranslationRequest) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *TranslationRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TranslationRequest) GetTranslateEditor() string {
	if x != nil {
		return x.TranslateEditor
	}
	return ""
}

func (x *TranslationRequest) GetTranslateGoogle() string {
	if x != nil {
		return x.TranslateGoogle
	}
	return ""
}

func (x *TranslationRequest) GetLangFrom() string {
	if x != nil {
		return x.LangFrom
	}
	return ""
}

func (x *TranslationRequest) GetLangTo() string {
	if x != nil {
		return x.LangTo
	}
	return ""
}

func (x *TranslationRequest) GetProcess() int32 {
	if x != nil {
		return x.Process
	}
	return 0
}

func (x *TranslationRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TranslationRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TranslationRequest) GetObjectIds() []int64 {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

func (x *TranslationRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TranslationRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TranslationRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *TranslationRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id                int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	CreateId          int64            `protobuf:"varint,2,opt,name=create_id,json=createId,proto3" json:"create_id,omitempty"`
	CourseId          int64            `protobuf:"varint,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	DocumentId        int64            `protobuf:"varint,4,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	ParagraphId       int64            `protobuf:"varint,5,opt,name=paragraph_id,json=paragraphId,proto3" json:"paragraph_id,omitempty"`
	VoiceId           int64            `protobuf:"varint,6,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	Fullname          string           `protobuf:"bytes,7,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Gender            string           `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Age               int32            `protobuf:"varint,9,opt,name=age,proto3" json:"age,omitempty"`
	Accent            int32            `protobuf:"varint,10,opt,name=accent,proto3" json:"accent,omitempty"`
	Avatar            string           `protobuf:"bytes,11,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Description       string           `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt         int64            `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status            Character_Status `protobuf:"varint,14,opt,name=status,proto3,enum=library.Character_Status" json:"status,omitempty"`
	SentenceCurrentId int64            `protobuf:"varint,15,opt,name=sentence_current_id,json=sentenceCurrentId,proto3" json:"sentence_current_id,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{34}
}

func (x *Character) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Character) GetCreateId() int64 {
	if x != nil {
		return x.CreateId
	}
	return 0
}

func (x *Character) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *Character) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *Character) GetParagraphId() int64 {
	if x != nil {
		return x.ParagraphId
	}
	return 0
}

func (x *Character) GetVoiceId() int64 {
	if x != nil {
		return x.VoiceId
	}
	return 0
}

func (x *Character) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *Character) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Character) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Character) GetAccent() int32 {
	if x != nil {
		return x.Accent
	}
	return 0
}

func (x *Character) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Character) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Character) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Character) GetStatus() Character_Status {
	if x != nil {
		return x.Status
	}
	return Character_default_state
}

func (x *Character) GetSentenceCurrentId() int64 {
	if x != nil {
		return x.SentenceCurrentId
	}
	return 0
}

type CharacterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateId    int64    `protobuf:"varint,2,opt,name=create_id,json=createId,proto3" json:"create_id,omitempty"`
	CourseId    int64    `protobuf:"varint,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	DocumentId  int64    `protobuf:"varint,4,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	ParagraphId int64    `protobuf:"varint,5,opt,name=paragraph_id,json=paragraphId,proto3" json:"paragraph_id,omitempty"`
	VoiceId     int64    `protobuf:"varint,6,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	Fullname    string   `protobuf:"bytes,7,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Gender      string   `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Age         int32    `protobuf:"varint,9,opt,name=age,proto3" json:"age,omitempty"`
	Accent      int32    `protobuf:"varint,10,opt,name=accent,proto3" json:"accent,omitempty"`
	Avatar      string   `protobuf:"bytes,11,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Description string   `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   int64    `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status      int32    `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	Limit       int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols        []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes    []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
	Ids         []int64  `protobuf:"varint,20,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CharacterRequest) Reset() {
	*x = CharacterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterRequest) ProtoMessage() {}

func (x *CharacterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterRequest.ProtoReflect.Descriptor instead.
func (*CharacterRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{35}
}

func (x *CharacterRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterRequest) GetCreateId() int64 {
	if x != nil {
		return x.CreateId
	}
	return 0
}

func (x *CharacterRequest) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *CharacterRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *CharacterRequest) GetParagraphId() int64 {
	if x != nil {
		return x.ParagraphId
	}
	return 0
}

func (x *CharacterRequest) GetVoiceId() int64 {
	if x != nil {
		return x.VoiceId
	}
	return 0
}

func (x *CharacterRequest) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *CharacterRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *CharacterRequest) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *CharacterRequest) GetAccent() int32 {
	if x != nil {
		return x.Accent
	}
	return 0
}

func (x *CharacterRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CharacterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CharacterRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CharacterRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CharacterRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CharacterRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CharacterRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *CharacterRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *CharacterRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Characters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Characters []*Character `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
}

func (x *Characters) Reset() {
	*x = Characters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Characters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Characters) ProtoMessage() {}

func (x *Characters) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Characters.ProtoReflect.Descriptor instead.
func (*Characters) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{36}
}

func (x *Characters) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Characters) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

type VoiceUsing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id          int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	ParagraphId int64 `protobuf:"varint,2,opt,name=paragraph_id,json=paragraphId,proto3" json:"paragraph_id,omitempty"`
	CharacterId int64 `protobuf:"varint,3,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	VoiceId     int64 `protobuf:"varint,4,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
}

func (x *VoiceUsing) Reset() {
	*x = VoiceUsing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceUsing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceUsing) ProtoMessage() {}

func (x *VoiceUsing) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceUsing.ProtoReflect.Descriptor instead.
func (*VoiceUsing) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{37}
}

func (x *VoiceUsing) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VoiceUsing) GetParagraphId() int64 {
	if x != nil {
		return x.ParagraphId
	}
	return 0
}

func (x *VoiceUsing) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *VoiceUsing) GetVoiceId() int64 {
	if x != nil {
		return x.VoiceId
	}
	return 0
}

type Voice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id              int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	SupplierVoiceId string         `protobuf:"bytes,2,opt,name=supplier_voice_id,json=supplierVoiceId,proto3" json:"supplier_voice_id,omitempty"`
	Name            string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Language        string         `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	LanguageCode    string         `protobuf:"bytes,5,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Accent          string         `protobuf:"bytes,6,opt,name=accent,proto3" json:"accent,omitempty"`
	Age             string         `protobuf:"bytes,7,opt,name=age,proto3" json:"age,omitempty"`
	Loudness        string         `protobuf:"bytes,8,opt,name=loudness,proto3" json:"loudness,omitempty"`
	Gender          string         `protobuf:"bytes,9,opt,name=gender,proto3" json:"gender,omitempty"`
	Style           string         `protobuf:"bytes,10,opt,name=style,proto3" json:"style,omitempty"`
	Tempo           string         `protobuf:"bytes,11,opt,name=tempo,proto3" json:"tempo,omitempty"`
	Texture         string         `protobuf:"bytes,12,opt,name=texture,proto3" json:"texture,omitempty"`
	IsCloned        Voice_IsCloned `protobuf:"varint,13,opt,name=is_cloned,json=isCloned,proto3,enum=library.Voice_IsCloned" json:"is_cloned,omitempty"`
	Sample          string         `protobuf:"bytes,14,opt,name=sample,proto3" json:"sample,omitempty"`
	VoiceEngine     string         `protobuf:"bytes,15,opt,name=voice_engine,json=voiceEngine,proto3" json:"voice_engine,omitempty"`
	Version         string         `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Voice) Reset() {
	*x = Voice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voice) ProtoMessage() {}

func (x *Voice) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voice.ProtoReflect.Descriptor instead.
func (*Voice) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{38}
}

func (x *Voice) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Voice) GetSupplierVoiceId() string {
	if x != nil {
		return x.SupplierVoiceId
	}
	return ""
}

func (x *Voice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Voice) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Voice) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *Voice) GetAccent() string {
	if x != nil {
		return x.Accent
	}
	return ""
}

func (x *Voice) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *Voice) GetLoudness() string {
	if x != nil {
		return x.Loudness
	}
	return ""
}

func (x *Voice) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Voice) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Voice) GetTempo() string {
	if x != nil {
		return x.Tempo
	}
	return ""
}

func (x *Voice) GetTexture() string {
	if x != nil {
		return x.Texture
	}
	return ""
}

func (x *Voice) GetIsCloned() Voice_IsCloned {
	if x != nil {
		return x.IsCloned
	}
	return Voice_default_is_cloned
}

func (x *Voice) GetSample() string {
	if x != nil {
		return x.Sample
	}
	return ""
}

func (x *Voice) GetVoiceEngine() string {
	if x != nil {
		return x.VoiceEngine
	}
	return ""
}

func (x *Voice) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Phrase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id          int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	SentenceId  int64         `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	Content     string        `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Component   string        `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
	Translation string        `protobuf:"bytes,5,opt,name=translation,proto3" json:"translation,omitempty"`
	Status      Phrase_Status `protobuf:"varint,6,opt,name=status,proto3,enum=library.Phrase_Status" json:"status,omitempty"`
	Position    int64         `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Phrase) Reset() {
	*x = Phrase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phrase) ProtoMessage() {}

func (x *Phrase) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phrase.ProtoReflect.Descriptor instead.
func (*Phrase) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{39}
}

func (x *Phrase) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Phrase) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *Phrase) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Phrase) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *Phrase) GetTranslation() string {
	if x != nil {
		return x.Translation
	}
	return ""
}

func (x *Phrase) GetStatus() Phrase_Status {
	if x != nil {
		return x.Status
	}
	return Phrase_default_state
}

func (x *Phrase) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type PhraseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SentenceId int64    `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	Content    string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Component  string   `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
	Status     int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Ids        []int64  `protobuf:"varint,11,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Limit      int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols       []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes   []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *PhraseRequest) Reset() {
	*x = PhraseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhraseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhraseRequest) ProtoMessage() {}

func (x *PhraseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhraseRequest.ProtoReflect.Descriptor instead.
func (*PhraseRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{40}
}

func (x *PhraseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhraseRequest) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *PhraseRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PhraseRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *PhraseRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PhraseRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PhraseRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PhraseRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PhraseRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *PhraseRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type Phrases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Phrases []*Phrase `protobuf:"bytes,2,rep,name=phrases,proto3" json:"phrases,omitempty"`
}

func (x *Phrases) Reset() {
	*x = Phrases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phrases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phrases) ProtoMessage() {}

func (x *Phrases) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phrases.ProtoReflect.Descriptor instead.
func (*Phrases) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{41}
}

func (x *Phrases) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Phrases) GetPhrases() []*Phrase {
	if x != nil {
		return x.Phrases
	}
	return nil
}

type Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id         int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	SentenceId int64          `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	MeanId     int64          `protobuf:"varint,3,opt,name=mean_id,json=meanId,proto3" json:"mean_id,omitempty"`
	Status     Example_Status `protobuf:"varint,5,opt,name=status,proto3,enum=library.Example_Status" json:"status,omitempty"`
}

func (x *Example) Reset() {
	*x = Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Example) ProtoMessage() {}

func (x *Example) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Example.ProtoReflect.Descriptor instead.
func (*Example) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{42}
}

func (x *Example) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Example) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *Example) GetMeanId() int64 {
	if x != nil {
		return x.MeanId
	}
	return 0
}

func (x *Example) GetStatus() Example_Status {
	if x != nil {
		return x.Status
	}
	return Example_default_state
}

type ExampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SentenceId int64    `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	MeanId     int64    `protobuf:"varint,3,opt,name=mean_id,json=meanId,proto3" json:"mean_id,omitempty"`
	Status     int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Limit      int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols       []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes   []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *ExampleRequest) Reset() {
	*x = ExampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleRequest) ProtoMessage() {}

func (x *ExampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleRequest.ProtoReflect.Descriptor instead.
func (*ExampleRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{43}
}

func (x *ExampleRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExampleRequest) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *ExampleRequest) GetMeanId() int64 {
	if x != nil {
		return x.MeanId
	}
	return 0
}

func (x *ExampleRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExampleRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ExampleRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ExampleRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *ExampleRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type Examples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Examples []*Example `protobuf:"bytes,2,rep,name=examples,proto3" json:"examples,omitempty"`
}

func (x *Examples) Reset() {
	*x = Examples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Examples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Examples) ProtoMessage() {}

func (x *Examples) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Examples.ProtoReflect.Descriptor instead.
func (*Examples) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{44}
}

func (x *Examples) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Examples) GetExamples() []*Example {
	if x != nil {
		return x.Examples
	}
	return nil
}

type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phonetic      string `protobuf:"bytes,3,opt,name=phonetic,proto3" json:"phonetic,omitempty"`
	PhoneticUk    string `protobuf:"bytes,4,opt,name=phonetic_uk,json=phoneticUk,proto3" json:"phonetic_uk,omitempty"`
	PhoneticUs    string `protobuf:"bytes,5,opt,name=phonetic_us,json=phoneticUs,proto3" json:"phonetic_us,omitempty"`
	AudioDownload int32  `protobuf:"varint,6,opt,name=audio_download,json=audioDownload,proto3" json:"audio_download,omitempty"`
	AudioUk       string `protobuf:"bytes,7,opt,name=audio_uk,json=audioUk,proto3" json:"audio_uk,omitempty"`
	AudioUs       string `protobuf:"bytes,8,opt,name=audio_us,json=audioUs,proto3" json:"audio_us,omitempty"`
	// `gorm:"text"`
	Origin   string `protobuf:"bytes,9,opt,name=origin,proto3" json:"origin,omitempty" gorm:"text"`
	See      string `protobuf:"bytes,10,opt,name=see,proto3" json:"see,omitempty"`
	Suggests string `protobuf:"bytes,11,opt,name=suggests,proto3" json:"suggests,omitempty"`
	// `gorm:"text"`
	Info        string      `protobuf:"bytes,12,opt,name=info,proto3" json:"info,omitempty" gorm:"text"`
	ProcessEnVi int32       `protobuf:"varint,13,opt,name=processEnVi,proto3" json:"processEnVi,omitempty"`
	ProcessEnEn int32       `protobuf:"varint,14,opt,name=processEnEn,proto3" json:"processEnEn,omitempty"`
	Status      Word_Status `protobuf:"varint,15,opt,name=status,proto3,enum=library.Word_Status" json:"status,omitempty"`
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{45}
}

func (x *Word) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Word) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Word) GetPhonetic() string {
	if x != nil {
		return x.Phonetic
	}
	return ""
}

func (x *Word) GetPhoneticUk() string {
	if x != nil {
		return x.PhoneticUk
	}
	return ""
}

func (x *Word) GetPhoneticUs() string {
	if x != nil {
		return x.PhoneticUs
	}
	return ""
}

func (x *Word) GetAudioDownload() int32 {
	if x != nil {
		return x.AudioDownload
	}
	return 0
}

func (x *Word) GetAudioUk() string {
	if x != nil {
		return x.AudioUk
	}
	return ""
}

func (x *Word) GetAudioUs() string {
	if x != nil {
		return x.AudioUs
	}
	return ""
}

func (x *Word) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Word) GetSee() string {
	if x != nil {
		return x.See
	}
	return ""
}

func (x *Word) GetSuggests() string {
	if x != nil {
		return x.Suggests
	}
	return ""
}

func (x *Word) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Word) GetProcessEnVi() int32 {
	if x != nil {
		return x.ProcessEnVi
	}
	return 0
}

func (x *Word) GetProcessEnEn() int32 {
	if x != nil {
		return x.ProcessEnEn
	}
	return 0
}

func (x *Word) GetStatus() Word_Status {
	if x != nil {
		return x.Status
	}
	return Word_default_state
}

type WordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phonetic      string   `protobuf:"bytes,3,opt,name=phonetic,proto3" json:"phonetic,omitempty"`
	PhoneticUk    string   `protobuf:"bytes,4,opt,name=phonetic_uk,json=phoneticUk,proto3" json:"phonetic_uk,omitempty"`
	PhoneticUs    string   `protobuf:"bytes,5,opt,name=phonetic_us,json=phoneticUs,proto3" json:"phonetic_us,omitempty"`
	AudioDownload int32    `protobuf:"varint,6,opt,name=audio_download,json=audioDownload,proto3" json:"audio_download,omitempty"`
	AudioUk       string   `protobuf:"bytes,7,opt,name=audio_uk,json=audioUk,proto3" json:"audio_uk,omitempty"`
	AudioUs       string   `protobuf:"bytes,8,opt,name=audio_us,json=audioUs,proto3" json:"audio_us,omitempty"`
	Origin        string   `protobuf:"bytes,9,opt,name=origin,proto3" json:"origin,omitempty"`
	See           string   `protobuf:"bytes,10,opt,name=see,proto3" json:"see,omitempty"`
	Suggests      string   `protobuf:"bytes,11,opt,name=suggests,proto3" json:"suggests,omitempty"`
	Info          string   `protobuf:"bytes,12,opt,name=info,proto3" json:"info,omitempty"`
	ProcessEnVi   int32    `protobuf:"varint,13,opt,name=processEnVi,proto3" json:"processEnVi,omitempty"`
	ProcessEnEn   int32    `protobuf:"varint,14,opt,name=processEnEn,proto3" json:"processEnEn,omitempty"`
	Status        int32    `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	Limit         int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols          []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes      []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *WordRequest) Reset() {
	*x = WordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordRequest) ProtoMessage() {}

func (x *WordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordRequest.ProtoReflect.Descriptor instead.
func (*WordRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{46}
}

func (x *WordRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WordRequest) GetPhonetic() string {
	if x != nil {
		return x.Phonetic
	}
	return ""
}

func (x *WordRequest) GetPhoneticUk() string {
	if x != nil {
		return x.PhoneticUk
	}
	return ""
}

func (x *WordRequest) GetPhoneticUs() string {
	if x != nil {
		return x.PhoneticUs
	}
	return ""
}

func (x *WordRequest) GetAudioDownload() int32 {
	if x != nil {
		return x.AudioDownload
	}
	return 0
}

func (x *WordRequest) GetAudioUk() string {
	if x != nil {
		return x.AudioUk
	}
	return ""
}

func (x *WordRequest) GetAudioUs() string {
	if x != nil {
		return x.AudioUs
	}
	return ""
}

func (x *WordRequest) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *WordRequest) GetSee() string {
	if x != nil {
		return x.See
	}
	return ""
}

func (x *WordRequest) GetSuggests() string {
	if x != nil {
		return x.Suggests
	}
	return ""
}

func (x *WordRequest) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *WordRequest) GetProcessEnVi() int32 {
	if x != nil {
		return x.ProcessEnVi
	}
	return 0
}

func (x *WordRequest) GetProcessEnEn() int32 {
	if x != nil {
		return x.ProcessEnEn
	}
	return 0
}

func (x *WordRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WordRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WordRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WordRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *WordRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type Words struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Words []*Word `protobuf:"bytes,2,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *Words) Reset() {
	*x = Words{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Words) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Words) ProtoMessage() {}

func (x *Words) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Words.ProtoReflect.Descriptor instead.
func (*Words) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{47}
}

func (x *Words) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Words) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

type Phonetic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	WordId int64  `protobuf:"varint,2,opt,name=word_id,json=wordId,proto3" json:"word_id,omitempty"`
	Word   string `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	Text   string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Audio  string `protobuf:"bytes,5,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *Phonetic) Reset() {
	*x = Phonetic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phonetic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phonetic) ProtoMessage() {}

func (x *Phonetic) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phonetic.ProtoReflect.Descriptor instead.
func (*Phonetic) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{48}
}

func (x *Phonetic) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Phonetic) GetWordId() int64 {
	if x != nil {
		return x.WordId
	}
	return 0
}

func (x *Phonetic) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Phonetic) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Phonetic) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

type PhoneticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WordId   int64    `protobuf:"varint,2,opt,name=word_id,json=wordId,proto3" json:"word_id,omitempty"`
	Word     string   `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	Text     string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Audio    string   `protobuf:"bytes,5,opt,name=audio,proto3" json:"audio,omitempty"`
	Words    []string `protobuf:"bytes,12,rep,name=words,proto3" json:"words,omitempty"`
	Ids      []int64  `protobuf:"varint,14,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	WordIds  []int64  `protobuf:"varint,15,rep,packed,name=word_ids,json=wordIds,proto3" json:"word_ids,omitempty"`
	Limit    int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols     []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *PhoneticRequest) Reset() {
	*x = PhoneticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneticRequest) ProtoMessage() {}

func (x *PhoneticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneticRequest.ProtoReflect.Descriptor instead.
func (*PhoneticRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{49}
}

func (x *PhoneticRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhoneticRequest) GetWordId() int64 {
	if x != nil {
		return x.WordId
	}
	return 0
}

func (x *PhoneticRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *PhoneticRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PhoneticRequest) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *PhoneticRequest) GetWords() []string {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *PhoneticRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PhoneticRequest) GetWordIds() []int64 {
	if x != nil {
		return x.WordIds
	}
	return nil
}

func (x *PhoneticRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PhoneticRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PhoneticRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *PhoneticRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type SentenceJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id          int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	SentenceId  int64               `protobuf:"varint,2,opt,name=sentence_id,json=sentenceId,proto3" json:"sentence_id,omitempty"`
	Process     SentenceJob_Process `protobuf:"varint,3,opt,name=process,proto3,enum=library.SentenceJob_Process" json:"process,omitempty"`
	Action      SentenceJob_Action  `protobuf:"varint,4,opt,name=action,proto3,enum=library.SentenceJob_Action" json:"action,omitempty"`
	UpdatedAt   int64               `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt   int64               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ParagraphId int64               `protobuf:"varint,7,opt,name=paragraph_id,json=paragraphId,proto3" json:"paragraph_id,omitempty"`
	Status      SentenceJob_Status  `protobuf:"varint,8,opt,name=status,proto3,enum=library.SentenceJob_Status" json:"status,omitempty"`
}

func (x *SentenceJob) Reset() {
	*x = SentenceJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceJob) ProtoMessage() {}

func (x *SentenceJob) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceJob.ProtoReflect.Descriptor instead.
func (*SentenceJob) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{50}
}

func (x *SentenceJob) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SentenceJob) GetSentenceId() int64 {
	if x != nil {
		return x.SentenceId
	}
	return 0
}

func (x *SentenceJob) GetProcess() SentenceJob_Process {
	if x != nil {
		return x.Process
	}
	return SentenceJob_default_process
}

func (x *SentenceJob) GetAction() SentenceJob_Action {
	if x != nil {
		return x.Action
	}
	return SentenceJob_default_action
}

func (x *SentenceJob) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SentenceJob) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SentenceJob) GetParagraphId() int64 {
	if x != nil {
		return x.ParagraphId
	}
	return 0
}

func (x *SentenceJob) GetStatus() SentenceJob_Status {
	if x != nil {
		return x.Status
	}
	return SentenceJob_default_state
}

type Pronounce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `gorm:"primaryKey;not null;autoIncrement"`
	Id   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;not null;autoIncrement"`
	Word string         `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	Type Pronounce_Type `protobuf:"varint,3,opt,name=type,proto3,enum=library.Pronounce_Type" json:"type,omitempty"`
	// `gorm:"text"`
	Guide    string `protobuf:"bytes,4,opt,name=guide,proto3" json:"guide,omitempty" gorm:"text"`
	Examples string `protobuf:"bytes,5,opt,name=examples,proto3" json:"examples,omitempty"`
	Keyx     string `protobuf:"bytes,6,opt,name=keyx,proto3" json:"keyx,omitempty"`
	Url      string `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	// `gorm:"-"`
	Phonetics []*Phonetic `protobuf:"bytes,8,rep,name=phonetics,proto3" json:"phonetics,omitempty" gorm:"-"`
}

func (x *Pronounce) Reset() {
	*x = Pronounce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pronounce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pronounce) ProtoMessage() {}

func (x *Pronounce) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pronounce.ProtoReflect.Descriptor instead.
func (*Pronounce) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{51}
}

func (x *Pronounce) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pronounce) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Pronounce) GetType() Pronounce_Type {
	if x != nil {
		return x.Type
	}
	return Pronounce_default_type
}

func (x *Pronounce) GetGuide() string {
	if x != nil {
		return x.Guide
	}
	return ""
}

func (x *Pronounce) GetExamples() string {
	if x != nil {
		return x.Examples
	}
	return ""
}

func (x *Pronounce) GetKeyx() string {
	if x != nil {
		return x.Keyx
	}
	return ""
}

func (x *Pronounce) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Pronounce) GetPhonetics() []*Phonetic {
	if x != nil {
		return x.Phonetics
	}
	return nil
}

type PronounceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Word     string   `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	Type     int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Guide    string   `protobuf:"bytes,4,opt,name=guide,proto3" json:"guide,omitempty"`
	Examples string   `protobuf:"bytes,5,opt,name=examples,proto3" json:"examples,omitempty"`
	Keyx     string   `protobuf:"bytes,6,opt,name=keyx,proto3" json:"keyx,omitempty"`
	Url      string   `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Words    []string `protobuf:"bytes,12,rep,name=words,proto3" json:"words,omitempty"`
	Ids      []int64  `protobuf:"varint,14,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Limit    int32    `protobuf:"varint,17,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32    `protobuf:"varint,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Cols     []string `protobuf:"bytes,16,rep,name=cols,proto3" json:"cols,omitempty"`
	Includes []string `protobuf:"bytes,19,rep,name=includes,proto3" json:"includes,omitempty"`
}

func (x *PronounceRequest) Reset() {
	*x = PronounceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PronounceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PronounceRequest) ProtoMessage() {}

func (x *PronounceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PronounceRequest.ProtoReflect.Descriptor instead.
func (*PronounceRequest) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{52}
}

func (x *PronounceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PronounceRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *PronounceRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PronounceRequest) GetGuide() string {
	if x != nil {
		return x.Guide
	}
	return ""
}

func (x *PronounceRequest) GetExamples() string {
	if x != nil {
		return x.Examples
	}
	return ""
}

func (x *PronounceRequest) GetKeyx() string {
	if x != nil {
		return x.Keyx
	}
	return ""
}

func (x *PronounceRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PronounceRequest) GetWords() []string {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *PronounceRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *PronounceRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PronounceRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PronounceRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *PronounceRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

type Pronounces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Pronounces []*Pronounce `protobuf:"bytes,2,rep,name=pronounces,proto3" json:"pronounces,omitempty"`
}

func (x *Pronounces) Reset() {
	*x = Pronounces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_library_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pronounces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pronounces) ProtoMessage() {}

func (x *Pronounces) ProtoReflect() protoreflect.Message {
	mi := &file_library_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pronounces.ProtoReflect.Descriptor instead.
func (*Pronounces) Descriptor() ([]byte, []int) {
	return file_library_proto_rawDescGZIP(), []int{53}
}

func (x *Pronounces) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Pronounces) GetPronounces() []*Pronounce {
	if x != nil {
		return x.Pronounces
	}
	return nil
}

var File_library_proto protoreflect.FileDescriptor

var file_library_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x22, 0xbd, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02,
	0x22, 0x4a, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe4, 0x02, 0x0a,
	0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xc3, 0x02, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0x7b, 0x0a, 0x09, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x82, 0x09, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x10, 0x04, 0x22, 0x5e, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x79, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x10, 0x03, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0x86, 0x02, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd3, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x94, 0x06, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12,
	0x36, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x41,
	0x72, 0x72, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73,
	0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x52, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x02, 0x22, 0xd5, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x08, 0x70, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x95, 0x04, 0x0a, 0x0c, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x22, 0xbb, 0x03, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22,
	0x46, 0x0a, 0x06, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6e, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x56, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x32,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x96, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x02, 0x22, 0xfc, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73,
	0x22, 0x63, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x6d, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x6d, 0x6d, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02,
	0x22, 0xc2, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x6d,
	0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x65, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x04, 0x4d, 0x65,
	0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x61,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0xb2, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x05,
	0x4d, 0x65, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x6d,
	0x65, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x61, 0x6e, 0x52, 0x05, 0x6d, 0x65, 0x61, 0x6e, 0x73,
	0x22, 0x95, 0x02, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f,
	0x62, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x42, 0x63, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x55, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x54, 0x69, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x65, 0x61, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x4d, 0x65, 0x61, 0x6e, 0x52, 0x05, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x49, 0x64, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x50, 0x6f, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x62,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x42, 0x63, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x55, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x54, 0x69, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f,
	0x62, 0x63, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x42, 0x63,
	0x73, 0x22, 0x41, 0x0a, 0x05, 0x50, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x05, 0x70,
	0x6f, 0x73, 0x65, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0x5e, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbc, 0x03, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e, 0x67, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x22, 0x85, 0x04, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x02, 0x22, 0xfa, 0x03, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x56, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7d, 0x0a, 0x0a, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xfb, 0x03, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x75, 0x64, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x32, 0x0a, 0x08, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x15, 0x0a,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x6e, 0x6f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x79, 0x65, 0x73, 0x10, 0x02, 0x22, 0x96, 0x02, 0x0a, 0x06, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0x80,
	0x02, 0x0a, 0x0d, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x73, 0x22, 0x4a, 0x0a, 0x07, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x52, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0xd0, 0x01, 0x0a, 0x0e,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x65, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x22, 0x4e,
	0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xe8,
	0x03, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x5f, 0x75, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x55, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x55, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x56, 0x69, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x56, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x45,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x45, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x57,
	0x6f, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22, 0x80, 0x04, 0x0a, 0x0b, 0x57, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x55, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x55, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x56,
	0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x56, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x45, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x45, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x05,
	0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x71, 0x0a, 0x08, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x0f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x22,
	0x9d, 0x04, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x22, 0x5c, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x22,
	0x99, 0x02, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x52, 0x09, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x6f, 0x77, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x74, 0x10, 0x02, 0x22, 0xa8, 0x02, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x73, 0x32, 0x86,
	0x07, 0x0a, 0x0e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x19, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x18, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x1a, 0x0f, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x12, 0x13, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x12, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x1a,
	0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x46, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73,
	0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x65, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x51, 0x75, 0x61, 0x6e, 0x67, 0x41, 0x6e, 0x68, 0x4d, 0x54,
	0x41, 0x2f, 0x65, 0x6e, 0x74, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_library_proto_rawDescOnce sync.Once
	file_library_proto_rawDescData = file_library_proto_rawDesc
)

func file_library_proto_rawDescGZIP() []byte {
	file_library_proto_rawDescOnce.Do(func() {
		file_library_proto_rawDescData = protoimpl.X.CompressGZIP(file_library_proto_rawDescData)
	})
	return file_library_proto_rawDescData
}

var file_library_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_library_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_library_proto_goTypes = []interface{}{
	(Course_Status)(0),            // 0: library.Course.Status
	(Document_Status)(0),          // 1: library.Document.Status
	(Paragraph_Type)(0),           // 2: library.Paragraph.Type
	(Paragraph_ProcessApprove)(0), // 3: library.Paragraph.ProcessApprove
	(Paragraph_Status)(0),         // 4: library.Paragraph.Status
	(Sentence_Status)(0),          // 5: library.Sentence.Status
	(Audio_Status)(0),             // 6: library.Audio.Status
	(SearchEngine_Status)(0),      // 7: library.SearchEngine.Status
	(SentencePos_Status)(0),       // 8: library.SentencePos.Status
	(Mean_Status)(0),              // 9: library.Mean.Status
	(Translation_Status)(0),       // 10: library.Translation.Status
	(Character_Status)(0),         // 11: library.Character.Status
	(Voice_IsCloned)(0),           // 12: library.Voice.IsCloned
	(Phrase_Status)(0),            // 13: library.Phrase.Status
	(Example_Status)(0),           // 14: library.Example.Status
	(Word_Status)(0),              // 15: library.Word.Status
	(SentenceJob_Process)(0),      // 16: library.SentenceJob.Process
	(SentenceJob_Action)(0),       // 17: library.SentenceJob.Action
	(SentenceJob_Status)(0),       // 18: library.SentenceJob.Status
	(Pronounce_Type)(0),           // 19: library.Pronounce.Type
	(*Listen)(nil),                // 20: library.Listen
	(*CourseRequest)(nil),         // 21: library.CourseRequest
	(*Course)(nil),                // 22: library.Course
	(*Courses)(nil),               // 23: library.Courses
	(*DocumentRequest)(nil),       // 24: library.DocumentRequest
	(*Document)(nil),              // 25: library.Document
	(*Documents)(nil),             // 26: library.Documents
	(*ParagraphRequest)(nil),      // 27: library.ParagraphRequest
	(*Paragraph)(nil),             // 28: library.Paragraph
	(*Paragraphs)(nil),            // 29: library.Paragraphs
	(*SentenceRequest)(nil),       // 30: library.SentenceRequest
	(*Sentence)(nil),              // 31: library.Sentence
	(*Sentences)(nil),             // 32: library.Sentences
	(*AudioRequest)(nil),          // 33: library.AudioRequest
	(*Audio)(nil),                 // 34: library.Audio
	(*Audios)(nil),                // 35: library.Audios
	(*CourseTagRequest)(nil),      // 36: library.CourseTagRequest
	(*CourseTag)(nil),             // 37: library.CourseTag
	(*CourseTags)(nil),            // 38: library.CourseTags
	(*SearchEngine)(nil),          // 39: library.SearchEngine
	(*SearchEngineRequest)(nil),   // 40: library.SearchEngineRequest
	(*SearchEngines)(nil),         // 41: library.SearchEngines
	(*SentencePos)(nil),           // 42: library.SentencePos
	(*SentencePosRequest)(nil),    // 43: library.SentencePosRequest
	(*SentencePoses)(nil),         // 44: library.SentencePoses
	(*Mean)(nil),                  // 45: library.Mean
	(*MeanRequest)(nil),           // 46: library.MeanRequest
	(*Means)(nil),                 // 47: library.Means
	(*Pos)(nil),                   // 48: library.Pos
	(*PosRequest)(nil),            // 49: library.PosRequest
	(*Poses)(nil),                 // 50: library.Poses
	(*Translation)(nil),           // 51: library.Translation
	(*Translations)(nil),          // 52: library.Translations
	(*TranslationRequest)(nil),    // 53: library.TranslationRequest
	(*Character)(nil),             // 54: library.Character
	(*CharacterRequest)(nil),      // 55: library.CharacterRequest
	(*Characters)(nil),            // 56: library.Characters
	(*VoiceUsing)(nil),            // 57: library.VoiceUsing
	(*Voice)(nil),                 // 58: library.Voice
	(*Phrase)(nil),                // 59: library.Phrase
	(*PhraseRequest)(nil),         // 60: library.PhraseRequest
	(*Phrases)(nil),               // 61: library.Phrases
	(*Example)(nil),               // 62: library.Example
	(*ExampleRequest)(nil),        // 63: library.ExampleRequest
	(*Examples)(nil),              // 64: library.Examples
	(*Word)(nil),                  // 65: library.Word
	(*WordRequest)(nil),           // 66: library.WordRequest
	(*Words)(nil),                 // 67: library.Words
	(*Phonetic)(nil),              // 68: library.Phonetic
	(*PhoneticRequest)(nil),       // 69: library.PhoneticRequest
	(*SentenceJob)(nil),           // 70: library.SentenceJob
	(*Pronounce)(nil),             // 71: library.Pronounce
	(*PronounceRequest)(nil),      // 72: library.PronounceRequest
	(*Pronounces)(nil),            // 73: library.Pronounces
}
var file_library_proto_depIdxs = []int32{
	0,  // 0: library.Course.status:type_name -> library.Course.Status
	25, // 1: library.Course.documents:type_name -> library.Document
	22, // 2: library.Courses.courses:type_name -> library.Course
	1,  // 3: library.Document.status:type_name -> library.Document.Status
	28, // 4: library.Document.paragraphs:type_name -> library.Paragraph
	22, // 5: library.Document.course:type_name -> library.Course
	25, // 6: library.Documents.documents:type_name -> library.Document
	22, // 7: library.Documents.course:type_name -> library.Course
	2,  // 8: library.Paragraph.type:type_name -> library.Paragraph.Type
	3,  // 9: library.Paragraph.process_approve:type_name -> library.Paragraph.ProcessApprove
	4,  // 10: library.Paragraph.status:type_name -> library.Paragraph.Status
	31, // 11: library.Paragraph.sentences:type_name -> library.Sentence
	25, // 12: library.Paragraph.document:type_name -> library.Document
	28, // 13: library.Paragraphs.paragraphs:type_name -> library.Paragraph
	25, // 14: library.Paragraphs.document:type_name -> library.Document
	5,  // 15: library.Sentence.status:type_name -> library.Sentence.Status
	34, // 16: library.Sentence.audios:type_name -> library.Audio
	51, // 17: library.Sentence.translation:type_name -> library.Translation
	28, // 18: library.Sentence.paragraph:type_name -> library.Paragraph
	42, // 19: library.Sentence.sentence_poses:type_name -> library.SentencePos
	59, // 20: library.Sentence.phrases:type_name -> library.Phrase
	31, // 21: library.Sentences.sentences:type_name -> library.Sentence
	54, // 22: library.Sentences.characters:type_name -> library.Character
	28, // 23: library.Sentences.pragraph:type_name -> library.Paragraph
	6,  // 24: library.Audio.status:type_name -> library.Audio.Status
	34, // 25: library.Audios.audios:type_name -> library.Audio
	37, // 26: library.CourseTags.courseTags:type_name -> library.CourseTag
	7,  // 27: library.SearchEngine.status:type_name -> library.SearchEngine.Status
	22, // 28: library.SearchEngine.courses:type_name -> library.Course
	25, // 29: library.SearchEngine.documents:type_name -> library.Document
	28, // 30: library.SearchEngine.paragraphs:type_name -> library.Paragraph
	39, // 31: library.SearchEngines.search_engines:type_name -> library.SearchEngine
	8,  // 32: library.SentencePos.status:type_name -> library.SentencePos.Status
	42, // 33: library.SentencePoses.sentence_poses:type_name -> library.SentencePos
	9,  // 34: library.Mean.status:type_name -> library.Mean.Status
	45, // 35: library.Means.means:type_name -> library.Mean
	45, // 36: library.Pos.means:type_name -> library.Mean
	65, // 37: library.Pos.word:type_name -> library.Word
	48, // 38: library.Poses.poses:type_name -> library.Pos
	10, // 39: library.Translation.status:type_name -> library.Translation.Status
	51, // 40: library.Translations.translations:type_name -> library.Translation
	11, // 41: library.Character.status:type_name -> library.Character.Status
	54, // 42: library.Characters.characters:type_name -> library.Character
	12, // 43: library.Voice.is_cloned:type_name -> library.Voice.IsCloned
	13, // 44: library.Phrase.status:type_name -> library.Phrase.Status
	59, // 45: library.Phrases.phrases:type_name -> library.Phrase
	14, // 46: library.Example.status:type_name -> library.Example.Status
	62, // 47: library.Examples.examples:type_name -> library.Example
	15, // 48: library.Word.status:type_name -> library.Word.Status
	65, // 49: library.Words.words:type_name -> library.Word
	16, // 50: library.SentenceJob.process:type_name -> library.SentenceJob.Process
	17, // 51: library.SentenceJob.action:type_name -> library.SentenceJob.Action
	18, // 52: library.SentenceJob.status:type_name -> library.SentenceJob.Status
	19, // 53: library.Pronounce.type:type_name -> library.Pronounce.Type
	68, // 54: library.Pronounce.phonetics:type_name -> library.Phonetic
	71, // 55: library.Pronounces.pronounces:type_name -> library.Pronounce
	21, // 56: library.LibraryService.ListCourses:input_type -> library.CourseRequest
	24, // 57: library.LibraryService.ListDocument:input_type -> library.DocumentRequest
	27, // 58: library.LibraryService.ListParagraph:input_type -> library.ParagraphRequest
	40, // 59: library.LibraryService.GetDataSearchEngine:input_type -> library.SearchEngineRequest
	30, // 60: library.LibraryService.ListSentence:input_type -> library.SentenceRequest
	30, // 61: library.LibraryService.StartLearnListen:input_type -> library.SentenceRequest
	20, // 62: library.LibraryService.EndLearnListen:input_type -> library.Listen
	49, // 63: library.LibraryService.GetPos:input_type -> library.PosRequest
	28, // 64: library.LibraryService.ApproveParagraph:input_type -> library.Paragraph
	43, // 65: library.LibraryService.ListSentencePos:input_type -> library.SentencePosRequest
	30, // 66: library.LibraryService.GetSentenceDetail:input_type -> library.SentenceRequest
	72, // 67: library.LibraryService.ListPronounce:input_type -> library.PronounceRequest
	72, // 68: library.LibraryService.GetPronounce:input_type -> library.PronounceRequest
	43, // 69: library.LibraryService.ListSentencePoses:input_type -> library.SentencePosRequest
	23, // 70: library.LibraryService.ListCourses:output_type -> library.Courses
	26, // 71: library.LibraryService.ListDocument:output_type -> library.Documents
	29, // 72: library.LibraryService.ListParagraph:output_type -> library.Paragraphs
	41, // 73: library.LibraryService.GetDataSearchEngine:output_type -> library.SearchEngines
	32, // 74: library.LibraryService.ListSentence:output_type -> library.Sentences
	32, // 75: library.LibraryService.StartLearnListen:output_type -> library.Sentences
	20, // 76: library.LibraryService.EndLearnListen:output_type -> library.Listen
	48, // 77: library.LibraryService.GetPos:output_type -> library.Pos
	28, // 78: library.LibraryService.ApproveParagraph:output_type -> library.Paragraph
	44, // 79: library.LibraryService.ListSentencePos:output_type -> library.SentencePoses
	31, // 80: library.LibraryService.GetSentenceDetail:output_type -> library.Sentence
	73, // 81: library.LibraryService.ListPronounce:output_type -> library.Pronounces
	71, // 82: library.LibraryService.GetPronounce:output_type -> library.Pronounce
	44, // 83: library.LibraryService.ListSentencePoses:output_type -> library.SentencePoses
	70, // [70:84] is the sub-list for method output_type
	56, // [56:70] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_library_proto_init() }
func file_library_proto_init() {
	if File_library_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_library_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Courses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParagraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paragraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paragraphs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audios); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEngine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEngineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEngines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentencePos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentencePosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentencePoses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Means); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Translation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Translations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Characters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceUsing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phrase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhraseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phrases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Examples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Words); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phonetic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pronounce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PronounceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_library_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pronounces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_library_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_library_proto_goTypes,
		DependencyIndexes: file_library_proto_depIdxs,
		EnumInfos:         file_library_proto_enumTypes,
		MessageInfos:      file_library_proto_msgTypes,
	}.Build()
	File_library_proto = out.File
	file_library_proto_rawDesc = nil
	file_library_proto_goTypes = nil
	file_library_proto_depIdxs = nil
}
