// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	CheckRegisterAccount(ctx context.Context, in *CheckRegisterAccountRequest, opts ...grpc.CallOption) (*CheckRegisterAccountResponse, error)
	VerifyOtpRegister(ctx context.Context, in *VerifyOtpRegisterRequest, opts ...grpc.CallOption) (*VerifyOtpRegisterResponse, error)
	RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*Account, error)
	Login(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResponse, error)
	MemberLogin(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*LoginMemberResponse, error)
	ChangeMemberPassword(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	ListAccounts(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Accounts, error)
	UpdateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Account, error)
	// -----------------member------------------------
	ListMembers(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Members, error)
	//
	CreateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	GetMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	// ------------------category----------------------
	ListCategories(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*Categories, error)
	CreateMemberCategory(ctx context.Context, in *MemberCategory, opts ...grpc.CallOption) (*MemberCategory, error)
	GetMemberCategory(ctx context.Context, in *MemberCategory, opts ...grpc.CallOption) (*MemberCategory, error)
	ListMemberCategories(ctx context.Context, in *MemberCategoryRequest, opts ...grpc.CallOption) (*MemberCategories, error)
	ListMemberPractice(ctx context.Context, in *MemberPracticeRequest, opts ...grpc.CallOption) (*MemberPractices, error)
	CreateMemberPractice(ctx context.Context, in *MemberPractice, opts ...grpc.CallOption) (*MemberPractice, error)
	ListGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Groups, error)
	ListMemberGroup(ctx context.Context, in *MemberGroupRequest, opts ...grpc.CallOption) (*MemberGroups, error)
	GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Group, error)
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	CreateMemberGroup(ctx context.Context, in *MemberGroup, opts ...grpc.CallOption) (*MemberGroup, error)
	ApproveMemberToGroup(ctx context.Context, in *MemberGroup, opts ...grpc.CallOption) (*MemberGroup, error)
	CreateAccountExercise(ctx context.Context, in *AccountExercise, opts ...grpc.CallOption) (*AccountExercise, error)
	ListAccountExercises(ctx context.Context, in *AccountExerciseRequest, opts ...grpc.CallOption) (*AccountExercises, error)
	CreateMemberExercise(ctx context.Context, in *MemberExercise, opts ...grpc.CallOption) (*MemberExercises, error)
	ListMemberMemberExercise(ctx context.Context, in *MemberExerciseRequest, opts ...grpc.CallOption) (*MemberExercises, error)
	ListGroupParagraph(ctx context.Context, in *GroupParagraphRequest, opts ...grpc.CallOption) (*GroupParagraphs, error)
	CreateGroupParagraph(ctx context.Context, in *GroupParagraph, opts ...grpc.CallOption) (*GroupParagraph, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) CheckRegisterAccount(ctx context.Context, in *CheckRegisterAccountRequest, opts ...grpc.CallOption) (*CheckRegisterAccountResponse, error) {
	out := new(CheckRegisterAccountResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CheckRegisterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) VerifyOtpRegister(ctx context.Context, in *VerifyOtpRegisterRequest, opts ...grpc.CallOption) (*VerifyOtpRegisterResponse, error) {
	out := new(VerifyOtpRegisterResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/VerifyOtpRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/config.ConfigService/RegisterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Login(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResponse, error) {
	out := new(LoginAccountResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) MemberLogin(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*LoginMemberResponse, error) {
	out := new(LoginMemberResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigService/MemberLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ChangeMemberPassword(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ChangeMemberPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListAccounts(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/config.ConfigService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListMembers(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Members, error) {
	out := new(Members)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/config.ConfigService/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListCategories(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateMemberCategory(ctx context.Context, in *MemberCategory, opts ...grpc.CallOption) (*MemberCategory, error) {
	out := new(MemberCategory)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateMemberCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetMemberCategory(ctx context.Context, in *MemberCategory, opts ...grpc.CallOption) (*MemberCategory, error) {
	out := new(MemberCategory)
	err := c.cc.Invoke(ctx, "/config.ConfigService/GetMemberCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListMemberCategories(ctx context.Context, in *MemberCategoryRequest, opts ...grpc.CallOption) (*MemberCategories, error) {
	out := new(MemberCategories)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListMemberCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListMemberPractice(ctx context.Context, in *MemberPracticeRequest, opts ...grpc.CallOption) (*MemberPractices, error) {
	out := new(MemberPractices)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListMemberPractice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateMemberPractice(ctx context.Context, in *MemberPractice, opts ...grpc.CallOption) (*MemberPractice, error) {
	out := new(MemberPractice)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateMemberPractice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListMemberGroup(ctx context.Context, in *MemberGroupRequest, opts ...grpc.CallOption) (*MemberGroups, error) {
	out := new(MemberGroups)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListMemberGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/config.ConfigService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateMemberGroup(ctx context.Context, in *MemberGroup, opts ...grpc.CallOption) (*MemberGroup, error) {
	out := new(MemberGroup)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateMemberGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ApproveMemberToGroup(ctx context.Context, in *MemberGroup, opts ...grpc.CallOption) (*MemberGroup, error) {
	out := new(MemberGroup)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ApproveMemberToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateAccountExercise(ctx context.Context, in *AccountExercise, opts ...grpc.CallOption) (*AccountExercise, error) {
	out := new(AccountExercise)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateAccountExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListAccountExercises(ctx context.Context, in *AccountExerciseRequest, opts ...grpc.CallOption) (*AccountExercises, error) {
	out := new(AccountExercises)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListAccountExercises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateMemberExercise(ctx context.Context, in *MemberExercise, opts ...grpc.CallOption) (*MemberExercises, error) {
	out := new(MemberExercises)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateMemberExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListMemberMemberExercise(ctx context.Context, in *MemberExerciseRequest, opts ...grpc.CallOption) (*MemberExercises, error) {
	out := new(MemberExercises)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListMemberMemberExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListGroupParagraph(ctx context.Context, in *GroupParagraphRequest, opts ...grpc.CallOption) (*GroupParagraphs, error) {
	out := new(GroupParagraphs)
	err := c.cc.Invoke(ctx, "/config.ConfigService/ListGroupParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateGroupParagraph(ctx context.Context, in *GroupParagraph, opts ...grpc.CallOption) (*GroupParagraph, error) {
	out := new(GroupParagraph)
	err := c.cc.Invoke(ctx, "/config.ConfigService/CreateGroupParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations should embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	CheckRegisterAccount(context.Context, *CheckRegisterAccountRequest) (*CheckRegisterAccountResponse, error)
	VerifyOtpRegister(context.Context, *VerifyOtpRegisterRequest) (*VerifyOtpRegisterResponse, error)
	RegisterAccount(context.Context, *RegisterAccountRequest) (*Account, error)
	Login(context.Context, *LoginAccountRequest) (*LoginAccountResponse, error)
	MemberLogin(context.Context, *MemberRequest) (*LoginMemberResponse, error)
	ChangeMemberPassword(context.Context, *Member) (*Member, error)
	ListAccounts(context.Context, *AccountRequest) (*Accounts, error)
	UpdateAccount(context.Context, *AccountRequest) (*Account, error)
	// -----------------member------------------------
	ListMembers(context.Context, *MemberRequest) (*Members, error)
	//
	CreateMember(context.Context, *Member) (*Member, error)
	GetMember(context.Context, *Member) (*Member, error)
	// ------------------category----------------------
	ListCategories(context.Context, *CategoryRequest) (*Categories, error)
	CreateMemberCategory(context.Context, *MemberCategory) (*MemberCategory, error)
	GetMemberCategory(context.Context, *MemberCategory) (*MemberCategory, error)
	ListMemberCategories(context.Context, *MemberCategoryRequest) (*MemberCategories, error)
	ListMemberPractice(context.Context, *MemberPracticeRequest) (*MemberPractices, error)
	CreateMemberPractice(context.Context, *MemberPractice) (*MemberPractice, error)
	ListGroup(context.Context, *GroupRequest) (*Groups, error)
	ListMemberGroup(context.Context, *MemberGroupRequest) (*MemberGroups, error)
	GetGroup(context.Context, *GroupRequest) (*Group, error)
	CreateGroup(context.Context, *Group) (*Group, error)
	CreateMemberGroup(context.Context, *MemberGroup) (*MemberGroup, error)
	ApproveMemberToGroup(context.Context, *MemberGroup) (*MemberGroup, error)
	CreateAccountExercise(context.Context, *AccountExercise) (*AccountExercise, error)
	ListAccountExercises(context.Context, *AccountExerciseRequest) (*AccountExercises, error)
	CreateMemberExercise(context.Context, *MemberExercise) (*MemberExercises, error)
	ListMemberMemberExercise(context.Context, *MemberExerciseRequest) (*MemberExercises, error)
	ListGroupParagraph(context.Context, *GroupParagraphRequest) (*GroupParagraphs, error)
	CreateGroupParagraph(context.Context, *GroupParagraph) (*GroupParagraph, error)
}

// UnimplementedConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) CheckRegisterAccount(context.Context, *CheckRegisterAccountRequest) (*CheckRegisterAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegisterAccount not implemented")
}
func (UnimplementedConfigServiceServer) VerifyOtpRegister(context.Context, *VerifyOtpRegisterRequest) (*VerifyOtpRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtpRegister not implemented")
}
func (UnimplementedConfigServiceServer) RegisterAccount(context.Context, *RegisterAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedConfigServiceServer) Login(context.Context, *LoginAccountRequest) (*LoginAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedConfigServiceServer) MemberLogin(context.Context, *MemberRequest) (*LoginMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLogin not implemented")
}
func (UnimplementedConfigServiceServer) ChangeMemberPassword(context.Context, *Member) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMemberPassword not implemented")
}
func (UnimplementedConfigServiceServer) ListAccounts(context.Context, *AccountRequest) (*Accounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedConfigServiceServer) UpdateAccount(context.Context, *AccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedConfigServiceServer) ListMembers(context.Context, *MemberRequest) (*Members, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedConfigServiceServer) CreateMember(context.Context, *Member) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedConfigServiceServer) GetMember(context.Context, *Member) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedConfigServiceServer) ListCategories(context.Context, *CategoryRequest) (*Categories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedConfigServiceServer) CreateMemberCategory(context.Context, *MemberCategory) (*MemberCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberCategory not implemented")
}
func (UnimplementedConfigServiceServer) GetMemberCategory(context.Context, *MemberCategory) (*MemberCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberCategory not implemented")
}
func (UnimplementedConfigServiceServer) ListMemberCategories(context.Context, *MemberCategoryRequest) (*MemberCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberCategories not implemented")
}
func (UnimplementedConfigServiceServer) ListMemberPractice(context.Context, *MemberPracticeRequest) (*MemberPractices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberPractice not implemented")
}
func (UnimplementedConfigServiceServer) CreateMemberPractice(context.Context, *MemberPractice) (*MemberPractice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberPractice not implemented")
}
func (UnimplementedConfigServiceServer) ListGroup(context.Context, *GroupRequest) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedConfigServiceServer) ListMemberGroup(context.Context, *MemberGroupRequest) (*MemberGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberGroup not implemented")
}
func (UnimplementedConfigServiceServer) GetGroup(context.Context, *GroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedConfigServiceServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedConfigServiceServer) CreateMemberGroup(context.Context, *MemberGroup) (*MemberGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberGroup not implemented")
}
func (UnimplementedConfigServiceServer) ApproveMemberToGroup(context.Context, *MemberGroup) (*MemberGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveMemberToGroup not implemented")
}
func (UnimplementedConfigServiceServer) CreateAccountExercise(context.Context, *AccountExercise) (*AccountExercise, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountExercise not implemented")
}
func (UnimplementedConfigServiceServer) ListAccountExercises(context.Context, *AccountExerciseRequest) (*AccountExercises, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountExercises not implemented")
}
func (UnimplementedConfigServiceServer) CreateMemberExercise(context.Context, *MemberExercise) (*MemberExercises, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberExercise not implemented")
}
func (UnimplementedConfigServiceServer) ListMemberMemberExercise(context.Context, *MemberExerciseRequest) (*MemberExercises, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberMemberExercise not implemented")
}
func (UnimplementedConfigServiceServer) ListGroupParagraph(context.Context, *GroupParagraphRequest) (*GroupParagraphs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupParagraph not implemented")
}
func (UnimplementedConfigServiceServer) CreateGroupParagraph(context.Context, *GroupParagraph) (*GroupParagraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupParagraph not implemented")
}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_CheckRegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRegisterAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CheckRegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CheckRegisterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CheckRegisterAccount(ctx, req.(*CheckRegisterAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_VerifyOtpRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).VerifyOtpRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/VerifyOtpRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).VerifyOtpRegister(ctx, req.(*VerifyOtpRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/RegisterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).RegisterAccount(ctx, req.(*RegisterAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Login(ctx, req.(*LoginAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_MemberLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).MemberLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/MemberLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).MemberLogin(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ChangeMemberPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ChangeMemberPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ChangeMemberPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ChangeMemberPassword(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListAccounts(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListMembers(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListCategories(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateMemberCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateMemberCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateMemberCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateMemberCategory(ctx, req.(*MemberCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetMemberCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetMemberCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/GetMemberCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetMemberCategory(ctx, req.(*MemberCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListMemberCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListMemberCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListMemberCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListMemberCategories(ctx, req.(*MemberCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListMemberPractice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPracticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListMemberPractice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListMemberPractice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListMemberPractice(ctx, req.(*MemberPracticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateMemberPractice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPractice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateMemberPractice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateMemberPractice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateMemberPractice(ctx, req.(*MemberPractice))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListMemberGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListMemberGroup(ctx, req.(*MemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateMemberGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateMemberGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateMemberGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateMemberGroup(ctx, req.(*MemberGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ApproveMemberToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ApproveMemberToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ApproveMemberToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ApproveMemberToGroup(ctx, req.(*MemberGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateAccountExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountExercise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateAccountExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateAccountExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateAccountExercise(ctx, req.(*AccountExercise))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListAccountExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListAccountExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListAccountExercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListAccountExercises(ctx, req.(*AccountExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateMemberExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberExercise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateMemberExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateMemberExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateMemberExercise(ctx, req.(*MemberExercise))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListMemberMemberExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListMemberMemberExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListMemberMemberExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListMemberMemberExercise(ctx, req.(*MemberExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListGroupParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListGroupParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/ListGroupParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListGroupParagraph(ctx, req.(*GroupParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateGroupParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupParagraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateGroupParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/CreateGroupParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateGroupParagraph(ctx, req.(*GroupParagraph))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRegisterAccount",
			Handler:    _ConfigService_CheckRegisterAccount_Handler,
		},
		{
			MethodName: "VerifyOtpRegister",
			Handler:    _ConfigService_VerifyOtpRegister_Handler,
		},
		{
			MethodName: "RegisterAccount",
			Handler:    _ConfigService_RegisterAccount_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ConfigService_Login_Handler,
		},
		{
			MethodName: "MemberLogin",
			Handler:    _ConfigService_MemberLogin_Handler,
		},
		{
			MethodName: "ChangeMemberPassword",
			Handler:    _ConfigService_ChangeMemberPassword_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _ConfigService_ListAccounts_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _ConfigService_UpdateAccount_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _ConfigService_ListMembers_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _ConfigService_CreateMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _ConfigService_GetMember_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _ConfigService_ListCategories_Handler,
		},
		{
			MethodName: "CreateMemberCategory",
			Handler:    _ConfigService_CreateMemberCategory_Handler,
		},
		{
			MethodName: "GetMemberCategory",
			Handler:    _ConfigService_GetMemberCategory_Handler,
		},
		{
			MethodName: "ListMemberCategories",
			Handler:    _ConfigService_ListMemberCategories_Handler,
		},
		{
			MethodName: "ListMemberPractice",
			Handler:    _ConfigService_ListMemberPractice_Handler,
		},
		{
			MethodName: "CreateMemberPractice",
			Handler:    _ConfigService_CreateMemberPractice_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _ConfigService_ListGroup_Handler,
		},
		{
			MethodName: "ListMemberGroup",
			Handler:    _ConfigService_ListMemberGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ConfigService_GetGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ConfigService_CreateGroup_Handler,
		},
		{
			MethodName: "CreateMemberGroup",
			Handler:    _ConfigService_CreateMemberGroup_Handler,
		},
		{
			MethodName: "ApproveMemberToGroup",
			Handler:    _ConfigService_ApproveMemberToGroup_Handler,
		},
		{
			MethodName: "CreateAccountExercise",
			Handler:    _ConfigService_CreateAccountExercise_Handler,
		},
		{
			MethodName: "ListAccountExercises",
			Handler:    _ConfigService_ListAccountExercises_Handler,
		},
		{
			MethodName: "CreateMemberExercise",
			Handler:    _ConfigService_CreateMemberExercise_Handler,
		},
		{
			MethodName: "ListMemberMemberExercise",
			Handler:    _ConfigService_ListMemberMemberExercise_Handler,
		},
		{
			MethodName: "ListGroupParagraph",
			Handler:    _ConfigService_ListGroupParagraph_Handler,
		},
		{
			MethodName: "CreateGroupParagraph",
			Handler:    _ConfigService_CreateGroupParagraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
